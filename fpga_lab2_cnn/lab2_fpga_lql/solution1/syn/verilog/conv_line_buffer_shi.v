// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_line_buffer_shi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data,
        conv_line_buffer_address0,
        conv_line_buffer_ce0,
        conv_line_buffer_we0,
        conv_line_buffer_d0,
        conv_line_buffer_q0,
        cal_conv_address0,
        cal_conv_ce0,
        cal_conv_we0,
        cal_conv_d0,
        cal_conv_q0,
        cal_conv_address1,
        cal_conv_ce1,
        cal_conv_we1,
        cal_conv_d1,
        cal_conv_q1
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] data;
output  [3:0] conv_line_buffer_address0;
output   conv_line_buffer_ce0;
output   conv_line_buffer_we0;
output  [31:0] conv_line_buffer_d0;
input  [31:0] conv_line_buffer_q0;
output  [3:0] cal_conv_address0;
output   cal_conv_ce0;
output   cal_conv_we0;
output  [31:0] cal_conv_d0;
input  [31:0] cal_conv_q0;
output  [3:0] cal_conv_address1;
output   cal_conv_ce1;
output   cal_conv_we1;
output  [31:0] cal_conv_d1;
input  [31:0] cal_conv_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] conv_line_buffer_address0;
reg conv_line_buffer_ce0;
reg conv_line_buffer_we0;
reg[31:0] conv_line_buffer_d0;
reg[3:0] cal_conv_address0;
reg cal_conv_ce0;
reg cal_conv_we0;
reg[3:0] cal_conv_address1;
reg cal_conv_ce1;
reg cal_conv_we1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg   [31:0] go_up_0_reg_411;
reg   [31:0] go_up_1_reg_416;
wire   [1:0] i_fu_186_p2;
reg   [1:0] i_reg_424;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln63_fu_180_p2;
wire   [4:0] sub_ln68_fu_231_p2;
reg   [4:0] sub_ln68_reg_434;
wire    ap_CS_fsm_state4;
reg   [0:0] tmp_3_reg_441;
reg   [31:0] conv_line_buffer_loa_reg_446;
wire   [1:0] j_fu_251_p2;
reg   [1:0] j_reg_454;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_4_fu_257_p3;
reg   [0:0] tmp_4_reg_459;
wire   [0:0] icmp_ln65_fu_245_p2;
wire   [4:0] add_ln68_1_fu_283_p2;
reg   [4:0] add_ln68_1_reg_468;
wire   [1:0] i_10_fu_318_p2;
reg   [1:0] i_10_reg_476;
wire    ap_CS_fsm_state7;
wire   [5:0] zext_ln81_fu_332_p1;
reg   [5:0] zext_ln81_reg_481;
wire   [0:0] icmp_ln76_fu_312_p2;
reg   [3:0] conv_line_buffer_add_1_reg_487;
wire   [31:0] select_ln81_fu_355_p3;
reg   [31:0] select_ln81_reg_492;
wire   [3:0] j_4_fu_367_p2;
reg   [3:0] j_4_reg_500;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln80_fu_373_p2;
reg   [0:0] icmp_ln80_reg_505;
wire   [0:0] icmp_ln78_fu_361_p2;
wire   [5:0] add_ln83_1_fu_397_p2;
reg   [5:0] add_ln83_1_reg_514;
reg   [1:0] i_0_reg_135;
reg   [1:0] j_0_reg_147;
wire    ap_CS_fsm_state6;
reg   [1:0] i1_0_reg_158;
reg   [3:0] j2_0_reg_169;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_8_fu_206_p3;
wire  signed [63:0] sext_ln68_fu_274_p1;
wire  signed [63:0] sext_ln70_fu_297_p1;
wire  signed [63:0] sext_ln68_1_fu_308_p1;
wire   [63:0] tmp_s_fu_342_p3;
wire   [63:0] zext_ln83_1_fu_388_p1;
wire   [63:0] zext_ln83_3_fu_402_p1;
wire   [4:0] tmp_7_fu_192_p3;
wire   [4:0] or_ln70_fu_200_p2;
wire   [3:0] tmp_fu_219_p3;
wire   [4:0] zext_ln68_1_fu_227_p1;
wire   [4:0] zext_ln68_fu_215_p1;
wire   [4:0] zext_ln68_2_fu_265_p1;
wire   [4:0] add_ln68_fu_269_p2;
wire   [4:0] zext_ln68_3_fu_279_p1;
wire   [4:0] zext_ln70_fu_288_p1;
wire   [4:0] add_ln70_fu_292_p2;
wire   [4:0] tmp_9_fu_324_p3;
wire   [4:0] or_ln81_fu_336_p2;
wire   [0:0] trunc_ln81_fu_351_p1;
wire   [5:0] zext_ln83_fu_379_p1;
wire   [5:0] add_ln83_fu_383_p2;
wire   [5:0] zext_ln83_2_fu_393_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i1_0_reg_158 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln78_fu_361_p2 == 1'd1))) begin
        i1_0_reg_158 <= i_10_reg_476;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_135 <= i_reg_424;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_reg_135 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_312_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j2_0_reg_169 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j2_0_reg_169 <= j_4_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_147 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_147 <= j_reg_454;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_245_p2 == 1'd0) & (tmp_4_fu_257_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln68_1_reg_468 <= add_ln68_1_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_361_p2 == 1'd0) & (icmp_ln80_fu_373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add_ln83_1_reg_514 <= add_ln83_1_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_312_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        conv_line_buffer_add_1_reg_487[3] <= tmp_s_fu_342_p3[3];
        select_ln81_reg_492 <= select_ln81_fu_355_p3;
        zext_ln81_reg_481[4 : 3] <= zext_ln81_fu_332_p1[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_line_buffer_loa_reg_446 <= conv_line_buffer_q0;
        sub_ln68_reg_434 <= sub_ln68_fu_231_p2;
        tmp_3_reg_441 <= i_0_reg_135[32'd1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        go_up_0_reg_411 <= cal_conv_q0;
        go_up_1_reg_416 <= cal_conv_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_10_reg_476 <= i_10_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_424 <= i_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        icmp_ln80_reg_505 <= icmp_ln80_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_4_reg_500 <= j_4_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_454 <= j_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_4_reg_459 <= j_0_reg_147[32'd1];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln76_fu_312_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln76_fu_312_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_fu_257_p3 == 1'd1) & (icmp_ln65_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        cal_conv_address0 = sext_ln70_fu_297_p1;
    end else if (((icmp_ln65_fu_245_p2 == 1'd0) & (tmp_4_fu_257_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        cal_conv_address0 = sext_ln68_fu_274_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cal_conv_address0 = 4'd3;
    end else begin
        cal_conv_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cal_conv_address1 = sext_ln68_1_fu_308_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cal_conv_address1 = 4'd6;
    end else begin
        cal_conv_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln65_fu_245_p2 == 1'd0) & (tmp_4_fu_257_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((tmp_4_fu_257_p3 == 1'd1) & (icmp_ln65_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cal_conv_ce0 = 1'b1;
    end else begin
        cal_conv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cal_conv_ce1 = 1'b1;
    end else begin
        cal_conv_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_fu_257_p3 == 1'd1) & (icmp_ln65_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        cal_conv_we0 = 1'b1;
    end else begin
        cal_conv_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_reg_459 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        cal_conv_we1 = 1'b1;
    end else begin
        cal_conv_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_line_buffer_address0 = zext_ln83_3_fu_402_p1;
    end else if (((icmp_ln78_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln80_fu_373_p2 == 1'd1))) begin
        conv_line_buffer_address0 = conv_line_buffer_add_1_reg_487;
    end else if (((icmp_ln78_fu_361_p2 == 1'd0) & (icmp_ln80_fu_373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        conv_line_buffer_address0 = zext_ln83_1_fu_388_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_line_buffer_address0 = tmp_8_fu_206_p3;
    end else begin
        conv_line_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | ((icmp_ln78_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln80_fu_373_p2 == 1'd1)) | ((icmp_ln78_fu_361_p2 == 1'd0) & (icmp_ln80_fu_373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        conv_line_buffer_ce0 = 1'b1;
    end else begin
        conv_line_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_line_buffer_d0 = conv_line_buffer_q0;
    end else if (((icmp_ln78_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln80_fu_373_p2 == 1'd1))) begin
        conv_line_buffer_d0 = select_ln81_reg_492;
    end else begin
        conv_line_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln80_reg_505 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln78_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln80_fu_373_p2 == 1'd1)))) begin
        conv_line_buffer_we0 = 1'b1;
    end else begin
        conv_line_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln63_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln65_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln76_fu_312_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln78_fu_361_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln68_1_fu_283_p2 = (sub_ln68_reg_434 + zext_ln68_3_fu_279_p1);

assign add_ln68_fu_269_p2 = (sub_ln68_reg_434 + zext_ln68_2_fu_265_p1);

assign add_ln70_fu_292_p2 = (sub_ln68_reg_434 + zext_ln70_fu_288_p1);

assign add_ln83_1_fu_397_p2 = (zext_ln81_reg_481 + zext_ln83_2_fu_393_p1);

assign add_ln83_fu_383_p2 = (zext_ln81_reg_481 + zext_ln83_fu_379_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cal_conv_d0 = ((tmp_3_reg_441[0:0] === 1'b1) ? data : conv_line_buffer_loa_reg_446);

assign cal_conv_d1 = cal_conv_q0;

assign i_10_fu_318_p2 = (i1_0_reg_158 + 2'd1);

assign i_fu_186_p2 = (i_0_reg_135 + 2'd1);

assign icmp_ln63_fu_180_p2 = ((i_0_reg_135 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_245_p2 = ((j_0_reg_147 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_312_p2 = ((i1_0_reg_158 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_361_p2 = ((j2_0_reg_169 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_373_p2 = ((j2_0_reg_169 == 4'd7) ? 1'b1 : 1'b0);

assign j_4_fu_367_p2 = (j2_0_reg_169 + 4'd1);

assign j_fu_251_p2 = (j_0_reg_147 + 2'd1);

assign or_ln70_fu_200_p2 = (tmp_7_fu_192_p3 | 5'd3);

assign or_ln81_fu_336_p2 = (tmp_9_fu_324_p3 | 5'd7);

assign select_ln81_fu_355_p3 = ((trunc_ln81_fu_351_p1[0:0] === 1'b1) ? go_up_1_reg_416 : go_up_0_reg_411);

assign sext_ln68_1_fu_308_p1 = $signed(add_ln68_1_reg_468);

assign sext_ln68_fu_274_p1 = $signed(add_ln68_fu_269_p2);

assign sext_ln70_fu_297_p1 = $signed(add_ln70_fu_292_p2);

assign sub_ln68_fu_231_p2 = (zext_ln68_1_fu_227_p1 - zext_ln68_fu_215_p1);

assign tmp_4_fu_257_p3 = j_0_reg_147[32'd1];

assign tmp_7_fu_192_p3 = {{i_0_reg_135}, {3'd0}};

assign tmp_8_fu_206_p3 = {{59'd0}, {or_ln70_fu_200_p2}};

assign tmp_9_fu_324_p3 = {{i1_0_reg_158}, {3'd0}};

assign tmp_fu_219_p3 = {{i_0_reg_135}, {2'd0}};

assign tmp_s_fu_342_p3 = {{59'd0}, {or_ln81_fu_336_p2}};

assign trunc_ln81_fu_351_p1 = i1_0_reg_158[0:0];

assign zext_ln68_1_fu_227_p1 = tmp_fu_219_p3;

assign zext_ln68_2_fu_265_p1 = j_fu_251_p2;

assign zext_ln68_3_fu_279_p1 = j_0_reg_147;

assign zext_ln68_fu_215_p1 = i_0_reg_135;

assign zext_ln70_fu_288_p1 = j_0_reg_147;

assign zext_ln81_fu_332_p1 = tmp_9_fu_324_p3;

assign zext_ln83_1_fu_388_p1 = add_ln83_fu_383_p2;

assign zext_ln83_2_fu_393_p1 = j2_0_reg_169;

assign zext_ln83_3_fu_402_p1 = add_ln83_1_reg_514;

assign zext_ln83_fu_379_p1 = j_4_fu_367_p2;

always @ (posedge ap_clk) begin
    zext_ln81_reg_481[2:0] <= 3'b000;
    zext_ln81_reg_481[5] <= 1'b0;
    conv_line_buffer_add_1_reg_487[2:0] <= 3'b111;
end

endmodule //conv_line_buffer_shi
