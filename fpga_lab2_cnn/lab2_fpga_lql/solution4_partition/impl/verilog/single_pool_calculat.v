// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module single_pool_calculat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        cal_pool_address0,
        cal_pool_ce0,
        cal_pool_q0,
        cal_pool_address1,
        cal_pool_ce1,
        cal_pool_q1,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [0:0] cal_pool_address0;
output   cal_pool_ce0;
input  [unknown:unknown] cal_pool_q0;
output  [0:0] cal_pool_address1;
output   cal_pool_ce1;
input  [unknown:unknown] cal_pool_q1;
output  [30:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] cal_pool_address0;
reg cal_pool_ce0;
reg[0:0] cal_pool_address1;
reg cal_pool_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [30:0] select_ln48_1_fu_72_p3;
reg   [30:0] select_ln48_1_reg_182;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [30:0] select_ln48_2_fu_93_p3;
reg   [30:0] select_ln48_2_reg_188;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [30:0] trunc_ln48_3_fu_104_p1;
reg   [30:0] trunc_ln48_3_reg_193;
wire   [0:0] icmp_ln48_2_fu_108_p2;
reg   [0:0] icmp_ln48_2_reg_198;
wire   [30:0] select_ln48_4_fu_133_p3;
reg   [30:0] select_ln48_4_reg_203;
wire   [30:0] trunc_ln48_5_fu_145_p1;
reg   [30:0] trunc_ln48_5_reg_208;
wire   [0:0] icmp_ln48_4_fu_149_p2;
reg   [0:0] icmp_ln48_4_reg_213;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire   [31:0] trunc_ln48_fu_38_p0;
wire   [31:0] tmp_fu_42_p1;
wire   [0:0] tmp_fu_42_p3;
wire   [30:0] trunc_ln48_fu_38_p1;
wire   [30:0] select_ln48_fu_50_p3;
wire   [31:0] trunc_ln48_1_fu_62_p0;
wire   [31:0] zext_ln48_fu_58_p1;
wire   [31:0] icmp_ln48_fu_66_p1;
wire   [0:0] icmp_ln48_fu_66_p2;
wire   [30:0] trunc_ln48_1_fu_62_p1;
wire   [31:0] trunc_ln48_2_fu_83_p0;
wire   [31:0] zext_ln48_1_fu_80_p1;
wire   [31:0] icmp_ln48_1_fu_87_p1;
wire   [0:0] icmp_ln48_1_fu_87_p2;
wire   [30:0] trunc_ln48_2_fu_83_p1;
wire   [31:0] trunc_ln48_3_fu_104_p0;
wire   [31:0] zext_ln48_2_fu_100_p1;
wire   [31:0] icmp_ln48_2_fu_108_p1;
wire   [30:0] select_ln48_3_fu_114_p3;
wire   [31:0] trunc_ln48_4_fu_123_p0;
wire   [31:0] zext_ln48_3_fu_119_p1;
wire   [31:0] icmp_ln48_3_fu_127_p1;
wire   [0:0] icmp_ln48_3_fu_127_p2;
wire   [30:0] trunc_ln48_4_fu_123_p1;
wire   [31:0] trunc_ln48_5_fu_145_p0;
wire   [31:0] zext_ln48_4_fu_141_p1;
wire   [31:0] icmp_ln48_4_fu_149_p1;
wire   [30:0] select_ln48_5_fu_155_p3;
wire   [31:0] trunc_ln48_6_fu_164_p0;
wire   [31:0] zext_ln48_5_fu_160_p1;
wire   [31:0] icmp_ln48_5_fu_168_p1;
wire   [0:0] icmp_ln48_5_fu_168_p2;
wire   [30:0] trunc_ln48_6_fu_164_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln48_2_reg_198 <= icmp_ln48_2_fu_108_p2;
        select_ln48_2_reg_188 <= select_ln48_2_fu_93_p3;
        trunc_ln48_3_reg_193 <= trunc_ln48_3_fu_104_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        icmp_ln48_4_reg_213 <= icmp_ln48_4_fu_149_p2;
        select_ln48_4_reg_203 <= select_ln48_4_fu_133_p3;
        trunc_ln48_5_reg_208 <= trunc_ln48_5_fu_145_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln48_1_reg_182 <= select_ln48_1_fu_72_p3;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3)))) begin
        cal_pool_address0 = 1'd1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        cal_pool_address0 = 1'd0;
    end else begin
        cal_pool_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        cal_pool_address1 = 1'd1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        cal_pool_address1 = 1'd0;
    end else begin
        cal_pool_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        cal_pool_ce0 = 1'b1;
    end else begin
        cal_pool_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        cal_pool_ce1 = 1'b1;
    end else begin
        cal_pool_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (1'b0 == ap_ce);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = ((icmp_ln48_5_fu_168_p2[0:0] === 1'b1) ? select_ln48_5_fu_155_p3 : trunc_ln48_6_fu_164_p1);

assign icmp_ln48_1_fu_87_p1 = cal_pool_q0;

assign icmp_ln48_1_fu_87_p2 = (($signed(zext_ln48_1_fu_80_p1) > $signed(icmp_ln48_1_fu_87_p1)) ? 1'b1 : 1'b0);

assign icmp_ln48_2_fu_108_p1 = cal_pool_q1;

assign icmp_ln48_2_fu_108_p2 = (($signed(zext_ln48_2_fu_100_p1) > $signed(icmp_ln48_2_fu_108_p1)) ? 1'b1 : 1'b0);

assign icmp_ln48_3_fu_127_p1 = cal_pool_q0;

assign icmp_ln48_3_fu_127_p2 = (($signed(zext_ln48_3_fu_119_p1) > $signed(icmp_ln48_3_fu_127_p1)) ? 1'b1 : 1'b0);

assign icmp_ln48_4_fu_149_p1 = cal_pool_q1;

assign icmp_ln48_4_fu_149_p2 = (($signed(zext_ln48_4_fu_141_p1) > $signed(icmp_ln48_4_fu_149_p1)) ? 1'b1 : 1'b0);

assign icmp_ln48_5_fu_168_p1 = cal_pool_q0;

assign icmp_ln48_5_fu_168_p2 = (($signed(zext_ln48_5_fu_160_p1) > $signed(icmp_ln48_5_fu_168_p1)) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_66_p1 = cal_pool_q1;

assign icmp_ln48_fu_66_p2 = (($signed(zext_ln48_fu_58_p1) > $signed(icmp_ln48_fu_66_p1)) ? 1'b1 : 1'b0);

assign select_ln48_1_fu_72_p3 = ((icmp_ln48_fu_66_p2[0:0] === 1'b1) ? select_ln48_fu_50_p3 : trunc_ln48_1_fu_62_p1);

assign select_ln48_2_fu_93_p3 = ((icmp_ln48_1_fu_87_p2[0:0] === 1'b1) ? select_ln48_1_reg_182 : trunc_ln48_2_fu_83_p1);

assign select_ln48_3_fu_114_p3 = ((icmp_ln48_2_reg_198[0:0] === 1'b1) ? select_ln48_2_reg_188 : trunc_ln48_3_reg_193);

assign select_ln48_4_fu_133_p3 = ((icmp_ln48_3_fu_127_p2[0:0] === 1'b1) ? select_ln48_3_fu_114_p3 : trunc_ln48_4_fu_123_p1);

assign select_ln48_5_fu_155_p3 = ((icmp_ln48_4_reg_213[0:0] === 1'b1) ? select_ln48_4_reg_203 : trunc_ln48_5_reg_208);

assign select_ln48_fu_50_p3 = ((tmp_fu_42_p3[0:0] === 1'b1) ? 31'd0 : trunc_ln48_fu_38_p1);

assign tmp_fu_42_p1 = cal_pool_q0;

assign tmp_fu_42_p3 = tmp_fu_42_p1[32'd31];

assign trunc_ln48_1_fu_62_p0 = cal_pool_q1;

assign trunc_ln48_1_fu_62_p1 = trunc_ln48_1_fu_62_p0[30:0];

assign trunc_ln48_2_fu_83_p0 = cal_pool_q0;

assign trunc_ln48_2_fu_83_p1 = trunc_ln48_2_fu_83_p0[30:0];

assign trunc_ln48_3_fu_104_p0 = cal_pool_q1;

assign trunc_ln48_3_fu_104_p1 = trunc_ln48_3_fu_104_p0[30:0];

assign trunc_ln48_4_fu_123_p0 = cal_pool_q0;

assign trunc_ln48_4_fu_123_p1 = trunc_ln48_4_fu_123_p0[30:0];

assign trunc_ln48_5_fu_145_p0 = cal_pool_q1;

assign trunc_ln48_5_fu_145_p1 = trunc_ln48_5_fu_145_p0[30:0];

assign trunc_ln48_6_fu_164_p0 = cal_pool_q0;

assign trunc_ln48_6_fu_164_p1 = trunc_ln48_6_fu_164_p0[30:0];

assign trunc_ln48_fu_38_p0 = cal_pool_q0;

assign trunc_ln48_fu_38_p1 = trunc_ln48_fu_38_p0[30:0];

assign zext_ln48_1_fu_80_p1 = select_ln48_1_reg_182;

assign zext_ln48_2_fu_100_p1 = select_ln48_2_fu_93_p3;

assign zext_ln48_3_fu_119_p1 = select_ln48_3_fu_114_p3;

assign zext_ln48_4_fu_141_p1 = select_ln48_4_fu_133_p3;

assign zext_ln48_5_fu_160_p1 = select_ln48_5_fu_155_p3;

assign zext_ln48_fu_58_p1 = select_ln48_fu_50_p3;

endmodule //single_pool_calculat
