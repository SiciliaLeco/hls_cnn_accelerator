// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool_line_buffer_shi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data,
        cal_pool_address0,
        cal_pool_ce0,
        cal_pool_we0,
        cal_pool_d0,
        cal_pool_q0,
        cal_pool_address1,
        cal_pool_ce1,
        cal_pool_we1,
        cal_pool_d1,
        cal_pool_q1,
        pool_line_buffer_address0,
        pool_line_buffer_ce0,
        pool_line_buffer_we0,
        pool_line_buffer_d0,
        pool_line_buffer_q0,
        pool_line_buffer_address1,
        pool_line_buffer_ce1,
        pool_line_buffer_we1,
        pool_line_buffer_d1,
        pool_line_buffer_q1,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] data;
output  [0:0] cal_pool_address0;
output   cal_pool_ce0;
output   cal_pool_we0;
output  [unknown:unknown] cal_pool_d0;
input  [unknown:unknown] cal_pool_q0;
output  [0:0] cal_pool_address1;
output   cal_pool_ce1;
output   cal_pool_we1;
output  [unknown:unknown] cal_pool_d1;
input  [unknown:unknown] cal_pool_q1;
output  [2:0] pool_line_buffer_address0;
output   pool_line_buffer_ce0;
output   pool_line_buffer_we0;
output  [31:0] pool_line_buffer_d0;
input  [31:0] pool_line_buffer_q0;
output  [2:0] pool_line_buffer_address1;
output   pool_line_buffer_ce1;
output   pool_line_buffer_we1;
output  [31:0] pool_line_buffer_d1;
input  [31:0] pool_line_buffer_q1;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] cal_pool_address0;
reg cal_pool_ce0;
reg cal_pool_we0;
reg[unknown:unknown] cal_pool_d0;
reg[0:0] cal_pool_address1;
reg cal_pool_ce1;
reg cal_pool_we1;
reg[2:0] pool_line_buffer_address0;
reg pool_line_buffer_ce0;
reg pool_line_buffer_we0;
reg[31:0] pool_line_buffer_d0;
reg[2:0] pool_line_buffer_address1;
reg pool_line_buffer_ce1;
reg pool_line_buffer_we1;
reg[31:0] pool_line_buffer_d1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_71;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
reg   [31:0] reg_79;
wire    ap_CS_fsm_state3;
reg   [31:0] go_up_reg_86;
reg   [31:0] pool_line_buffer_loa_3_reg_91;
reg   [31:0] ap_port_reg_data;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            reg_71 <= pool_line_buffer_q1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            reg_71 <= pool_line_buffer_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            reg_79 <= pool_line_buffer_q0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            reg_79 <= pool_line_buffer_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ap_port_reg_data <= data;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
        go_up_reg_86 <= cal_pool_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3))) begin
        pool_line_buffer_loa_3_reg_91 <= pool_line_buffer_q1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        cal_pool_address0 = 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state1))) begin
        cal_pool_address0 = 1'd1;
    end else begin
        cal_pool_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        cal_pool_address1 = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cal_pool_address1 = 1'd0;
    end else begin
        cal_pool_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cal_pool_ce0 = 1'b1;
    end else begin
        cal_pool_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cal_pool_ce1 = 1'b1;
    end else begin
        cal_pool_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cal_pool_d0 = ap_port_reg_data;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cal_pool_d0 = reg_71;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cal_pool_d0 = cal_pool_q1;
    end else begin
        cal_pool_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)))) begin
        cal_pool_we0 = 1'b1;
    end else begin
        cal_pool_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3))) begin
        cal_pool_we1 = 1'b1;
    end else begin
        cal_pool_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pool_line_buffer_address0 = 3'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_line_buffer_address0 = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        pool_line_buffer_address0 = 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        pool_line_buffer_address0 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        pool_line_buffer_address0 = 3'd2;
    end else begin
        pool_line_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_line_buffer_address1 = 3'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        pool_line_buffer_address1 = 3'd5;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        pool_line_buffer_address1 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        pool_line_buffer_address1 = 3'd1;
    end else begin
        pool_line_buffer_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        pool_line_buffer_ce0 = 1'b1;
    end else begin
        pool_line_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        pool_line_buffer_ce1 = 1'b1;
    end else begin
        pool_line_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pool_line_buffer_d0 = go_up_reg_86;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        pool_line_buffer_d0 = pool_line_buffer_loa_3_reg_91;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_line_buffer_d0 = reg_71;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        pool_line_buffer_d0 = reg_79;
    end else begin
        pool_line_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pool_line_buffer_d1 = reg_71;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_line_buffer_d1 = reg_79;
    end else begin
        pool_line_buffer_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)))) begin
        pool_line_buffer_we0 = 1'b1;
    end else begin
        pool_line_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5)))) begin
        pool_line_buffer_we1 = 1'b1;
    end else begin
        pool_line_buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign cal_pool_d1 = cal_pool_q1;

endmodule //pool_line_buffer_shi
