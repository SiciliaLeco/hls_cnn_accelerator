// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "single_conv_calculat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic single_conv_calculat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic single_conv_calculat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> single_conv_calculat::ap_ST_fsm_state1 = "1";
const sc_lv<6> single_conv_calculat::ap_ST_fsm_state2 = "10";
const sc_lv<6> single_conv_calculat::ap_ST_fsm_state3 = "100";
const sc_lv<6> single_conv_calculat::ap_ST_fsm_state4 = "1000";
const sc_lv<6> single_conv_calculat::ap_ST_fsm_state5 = "10000";
const sc_lv<6> single_conv_calculat::ap_ST_fsm_state6 = "100000";
const sc_lv<32> single_conv_calculat::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> single_conv_calculat::ap_const_lv32_1 = "1";
const sc_lv<1> single_conv_calculat::ap_const_lv1_0 = "0";
const sc_lv<32> single_conv_calculat::ap_const_lv32_2 = "10";
const sc_lv<32> single_conv_calculat::ap_const_lv32_3 = "11";
const sc_lv<32> single_conv_calculat::ap_const_lv32_4 = "100";
const sc_lv<2> single_conv_calculat::ap_const_lv2_0 = "00";
const sc_lv<1> single_conv_calculat::ap_const_lv1_1 = "1";
const sc_lv<32> single_conv_calculat::ap_const_lv32_5 = "101";
const sc_lv<2> single_conv_calculat::ap_const_lv2_3 = "11";
const sc_lv<2> single_conv_calculat::ap_const_lv2_1 = "1";
const bool single_conv_calculat::ap_const_boolean_1 = true;

single_conv_calculat::single_conv_calculat(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln35_fu_132_p2);
    sensitive << ( sub_ln35_reg_172 );
    sensitive << ( zext_ln35_2_fu_128_p1 );

    SC_METHOD(thread_ans_fu_147_p2);
    sensitive << ( mul_ln35_reg_205 );
    sensitive << ( ans_1_fu_22 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln31_fu_82_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln31_fu_82_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln31_fu_82_p2 );
    sensitive << ( ans_1_fu_22 );

    SC_METHOD(thread_cal_conv_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sext_ln35_fu_137_p1 );

    SC_METHOD(thread_cal_conv_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_fu_88_p2);
    sensitive << ( i_0_reg_52 );

    SC_METHOD(thread_icmp_ln31_fu_82_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_52 );

    SC_METHOD(thread_icmp_ln33_fu_116_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_63 );

    SC_METHOD(thread_j_fu_122_p2);
    sensitive << ( j_0_reg_63 );

    SC_METHOD(thread_kernel_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sext_ln35_fu_137_p1 );

    SC_METHOD(thread_kernel_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln35_fu_143_p2);
    sensitive << ( cal_conv_load_reg_195 );
    sensitive << ( kernel_load_reg_200 );

    SC_METHOD(thread_sext_ln35_fu_137_p1);
    sensitive << ( add_ln35_fu_132_p2 );

    SC_METHOD(thread_sub_ln35_fu_110_p2);
    sensitive << ( zext_ln35_1_fu_106_p1 );
    sensitive << ( zext_ln35_fu_94_p1 );

    SC_METHOD(thread_tmp_fu_98_p3);
    sensitive << ( i_0_reg_52 );

    SC_METHOD(thread_zext_ln35_1_fu_106_p1);
    sensitive << ( tmp_fu_98_p3 );

    SC_METHOD(thread_zext_ln35_2_fu_128_p1);
    sensitive << ( j_0_reg_63 );

    SC_METHOD(thread_zext_ln35_fu_94_p1);
    sensitive << ( i_0_reg_52 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln31_fu_82_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln33_fu_116_p2 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "single_conv_calculat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, cal_conv_address0, "(port)cal_conv_address0");
    sc_trace(mVcdFile, cal_conv_ce0, "(port)cal_conv_ce0");
    sc_trace(mVcdFile, cal_conv_q0, "(port)cal_conv_q0");
    sc_trace(mVcdFile, kernel_address0, "(port)kernel_address0");
    sc_trace(mVcdFile, kernel_ce0, "(port)kernel_ce0");
    sc_trace(mVcdFile, kernel_q0, "(port)kernel_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_88_p2, "i_fu_88_p2");
    sc_trace(mVcdFile, i_reg_167, "i_reg_167");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sub_ln35_fu_110_p2, "sub_ln35_fu_110_p2");
    sc_trace(mVcdFile, sub_ln35_reg_172, "sub_ln35_reg_172");
    sc_trace(mVcdFile, icmp_ln31_fu_82_p2, "icmp_ln31_fu_82_p2");
    sc_trace(mVcdFile, j_fu_122_p2, "j_fu_122_p2");
    sc_trace(mVcdFile, j_reg_180, "j_reg_180");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln33_fu_116_p2, "icmp_ln33_fu_116_p2");
    sc_trace(mVcdFile, cal_conv_load_reg_195, "cal_conv_load_reg_195");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, kernel_load_reg_200, "kernel_load_reg_200");
    sc_trace(mVcdFile, mul_ln35_fu_143_p2, "mul_ln35_fu_143_p2");
    sc_trace(mVcdFile, mul_ln35_reg_205, "mul_ln35_reg_205");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_0_reg_52, "i_0_reg_52");
    sc_trace(mVcdFile, j_0_reg_63, "j_0_reg_63");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, sext_ln35_fu_137_p1, "sext_ln35_fu_137_p1");
    sc_trace(mVcdFile, ans_1_fu_22, "ans_1_fu_22");
    sc_trace(mVcdFile, ans_fu_147_p2, "ans_fu_147_p2");
    sc_trace(mVcdFile, tmp_fu_98_p3, "tmp_fu_98_p3");
    sc_trace(mVcdFile, zext_ln35_1_fu_106_p1, "zext_ln35_1_fu_106_p1");
    sc_trace(mVcdFile, zext_ln35_fu_94_p1, "zext_ln35_fu_94_p1");
    sc_trace(mVcdFile, zext_ln35_2_fu_128_p1, "zext_ln35_2_fu_128_p1");
    sc_trace(mVcdFile, add_ln35_fu_132_p2, "add_ln35_fu_132_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

single_conv_calculat::~single_conv_calculat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void single_conv_calculat::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ans_1_fu_22 = ans_fu_147_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ans_1_fu_22 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln33_fu_116_p2.read(), ap_const_lv1_1))) {
        i_0_reg_52 = i_reg_167.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_52 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln31_fu_82_p2.read(), ap_const_lv1_0))) {
        j_0_reg_63 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_0_reg_63 = j_reg_180.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cal_conv_load_reg_195 = cal_conv_q0.read();
        kernel_load_reg_200 = kernel_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_167 = i_fu_88_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_180 = j_fu_122_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        mul_ln35_reg_205 = mul_ln35_fu_143_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln31_fu_82_p2.read(), ap_const_lv1_0))) {
        sub_ln35_reg_172 = sub_ln35_fu_110_p2.read();
    }
}

void single_conv_calculat::thread_add_ln35_fu_132_p2() {
    add_ln35_fu_132_p2 = (!sub_ln35_reg_172.read().is_01() || !zext_ln35_2_fu_128_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(sub_ln35_reg_172.read()) + sc_biguint<5>(zext_ln35_2_fu_128_p1.read()));
}

void single_conv_calculat::thread_ans_fu_147_p2() {
    ans_fu_147_p2 = (!ans_1_fu_22.read().is_01() || !mul_ln35_reg_205.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ans_1_fu_22.read()) + sc_biguint<32>(mul_ln35_reg_205.read()));
}

void single_conv_calculat::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void single_conv_calculat::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void single_conv_calculat::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void single_conv_calculat::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void single_conv_calculat::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void single_conv_calculat::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void single_conv_calculat::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln31_fu_82_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void single_conv_calculat::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void single_conv_calculat::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln31_fu_82_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void single_conv_calculat::thread_ap_return() {
    ap_return = ans_1_fu_22.read();
}

void single_conv_calculat::thread_cal_conv_address0() {
    cal_conv_address0 =  (sc_lv<4>) (sext_ln35_fu_137_p1.read());
}

void single_conv_calculat::thread_cal_conv_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cal_conv_ce0 = ap_const_logic_1;
    } else {
        cal_conv_ce0 = ap_const_logic_0;
    }
}

void single_conv_calculat::thread_i_fu_88_p2() {
    i_fu_88_p2 = (!i_0_reg_52.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_0_reg_52.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void single_conv_calculat::thread_icmp_ln31_fu_82_p2() {
    icmp_ln31_fu_82_p2 = (!i_0_reg_52.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_52.read() == ap_const_lv2_3);
}

void single_conv_calculat::thread_icmp_ln33_fu_116_p2() {
    icmp_ln33_fu_116_p2 = (!j_0_reg_63.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_63.read() == ap_const_lv2_3);
}

void single_conv_calculat::thread_j_fu_122_p2() {
    j_fu_122_p2 = (!j_0_reg_63.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j_0_reg_63.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void single_conv_calculat::thread_kernel_address0() {
    kernel_address0 =  (sc_lv<4>) (sext_ln35_fu_137_p1.read());
}

void single_conv_calculat::thread_kernel_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        kernel_ce0 = ap_const_logic_1;
    } else {
        kernel_ce0 = ap_const_logic_0;
    }
}

void single_conv_calculat::thread_mul_ln35_fu_143_p2() {
    mul_ln35_fu_143_p2 = (!kernel_load_reg_200.read().is_01() || !cal_conv_load_reg_195.read().is_01())? sc_lv<32>(): sc_bigint<32>(kernel_load_reg_200.read()) * sc_bigint<32>(cal_conv_load_reg_195.read());
}

void single_conv_calculat::thread_sext_ln35_fu_137_p1() {
    sext_ln35_fu_137_p1 = esl_sext<64,5>(add_ln35_fu_132_p2.read());
}

void single_conv_calculat::thread_sub_ln35_fu_110_p2() {
    sub_ln35_fu_110_p2 = (!zext_ln35_1_fu_106_p1.read().is_01() || !zext_ln35_fu_94_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(zext_ln35_1_fu_106_p1.read()) - sc_biguint<5>(zext_ln35_fu_94_p1.read()));
}

void single_conv_calculat::thread_tmp_fu_98_p3() {
    tmp_fu_98_p3 = esl_concat<2,2>(i_0_reg_52.read(), ap_const_lv2_0);
}

void single_conv_calculat::thread_zext_ln35_1_fu_106_p1() {
    zext_ln35_1_fu_106_p1 = esl_zext<5,4>(tmp_fu_98_p3.read());
}

void single_conv_calculat::thread_zext_ln35_2_fu_128_p1() {
    zext_ln35_2_fu_128_p1 = esl_zext<5,2>(j_0_reg_63.read());
}

void single_conv_calculat::thread_zext_ln35_fu_94_p1() {
    zext_ln35_fu_94_p1 = esl_zext<5,2>(i_0_reg_52.read());
}

void single_conv_calculat::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln31_fu_82_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln33_fu_116_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

}

