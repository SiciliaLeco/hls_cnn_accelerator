// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module single_conv_calculat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cal_conv_address0,
        cal_conv_ce0,
        cal_conv_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] cal_conv_address0;
output   cal_conv_ce0;
input  [31:0] cal_conv_q0;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cal_conv_ce0;
reg kernel_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_fu_88_p2;
reg   [1:0] i_reg_167;
wire    ap_CS_fsm_state2;
wire   [4:0] sub_ln35_fu_110_p2;
reg   [4:0] sub_ln35_reg_172;
wire   [0:0] icmp_ln31_fu_82_p2;
wire   [1:0] j_fu_122_p2;
reg   [1:0] j_reg_180;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln33_fu_116_p2;
reg  signed [31:0] cal_conv_load_reg_195;
wire    ap_CS_fsm_state4;
reg  signed [31:0] kernel_load_reg_200;
wire   [31:0] mul_ln35_fu_143_p2;
reg   [31:0] mul_ln35_reg_205;
wire    ap_CS_fsm_state5;
reg   [1:0] i_0_reg_52;
reg   [1:0] j_0_reg_63;
wire    ap_CS_fsm_state6;
wire  signed [63:0] sext_ln35_fu_137_p1;
reg   [31:0] ans_1_fu_22;
wire   [31:0] ans_fu_147_p2;
wire   [3:0] tmp_fu_98_p3;
wire   [4:0] zext_ln35_1_fu_106_p1;
wire   [4:0] zext_ln35_fu_94_p1;
wire   [4:0] zext_ln35_2_fu_128_p1;
wire   [4:0] add_ln35_fu_132_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ans_1_fu_22 <= ans_fu_147_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ans_1_fu_22 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_52 <= i_reg_167;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_52 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_82_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_63 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_63 <= j_reg_180;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cal_conv_load_reg_195 <= cal_conv_q0;
        kernel_load_reg_200 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_167 <= i_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_180 <= j_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln35_reg_205 <= mul_ln35_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_82_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln35_reg_172 <= sub_ln35_fu_110_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln31_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cal_conv_ce0 = 1'b1;
    end else begin
        cal_conv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln33_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_132_p2 = (sub_ln35_reg_172 + zext_ln35_2_fu_128_p1);

assign ans_fu_147_p2 = (ans_1_fu_22 + mul_ln35_reg_205);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = ans_1_fu_22;

assign cal_conv_address0 = sext_ln35_fu_137_p1;

assign i_fu_88_p2 = (i_0_reg_52 + 2'd1);

assign icmp_ln31_fu_82_p2 = ((i_0_reg_52 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_116_p2 = ((j_0_reg_63 == 2'd3) ? 1'b1 : 1'b0);

assign j_fu_122_p2 = (j_0_reg_63 + 2'd1);

assign kernel_address0 = sext_ln35_fu_137_p1;

assign mul_ln35_fu_143_p2 = ($signed(kernel_load_reg_200) * $signed(cal_conv_load_reg_195));

assign sext_ln35_fu_137_p1 = $signed(add_ln35_fu_132_p2);

assign sub_ln35_fu_110_p2 = (zext_ln35_1_fu_106_p1 - zext_ln35_fu_94_p1);

assign tmp_fu_98_p3 = {{i_0_reg_52}, {2'd0}};

assign zext_ln35_1_fu_106_p1 = tmp_fu_98_p3;

assign zext_ln35_2_fu_128_p1 = j_0_reg_63;

assign zext_ln35_fu_94_p1 = i_0_reg_52;

endmodule //single_conv_calculat
