// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "conv_line_buffer_shi.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic conv_line_buffer_shi::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic conv_line_buffer_shi::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state1 = "1";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state2 = "10";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state3 = "100";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state4 = "1000";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state5 = "10000";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state6 = "100000";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state7 = "1000000";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state8 = "10000000";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state9 = "100000000";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state10 = "1000000000";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state11 = "10000000000";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state12 = "100000000000";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<15> conv_line_buffer_shi::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_2 = "10";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_7 = "111";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_1 = "1";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_3 = "11";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_4 = "100";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_5 = "101";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_6 = "110";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_E = "1110";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_8 = "1000";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_A = "1010";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_C = "1100";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_3 = "11";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_B = "1011";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_1 = "1";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_2 = "10";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_4 = "100";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_5 = "101";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_6 = "110";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_7 = "111";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_9 = "1001";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_A = "1010";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_C = "1100";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_D = "1101";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_E = "1110";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_F = "1111";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_0 = "0000";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_9 = "1001";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_B = "1011";
const sc_lv<4> conv_line_buffer_shi::ap_const_lv4_8 = "1000";
const sc_lv<32> conv_line_buffer_shi::ap_const_lv32_D = "1101";
const bool conv_line_buffer_shi::ap_const_boolean_1 = true;

conv_line_buffer_shi::conv_line_buffer_shi(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_cal_conv_0_0);
    sensitive << ( cal_conv_0_1_i );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cal_conv_0_0_ap_vld);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cal_conv_0_1_o);
    sensitive << ( cal_conv_0_1_i );
    sensitive << ( cal_conv_0_2_i );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cal_conv_0_1_o_ap_vld);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cal_conv_0_2_o);
    sensitive << ( cal_conv_0_2_i );
    sensitive << ( ap_ce );
    sensitive << ( conv_line_buffer_loa_reg_190 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cal_conv_0_2_o_ap_vld);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cal_conv_1_0_o);
    sensitive << ( cal_conv_1_0_i );
    sensitive << ( cal_conv_1_1_i );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_cal_conv_1_0_o_ap_vld);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_cal_conv_1_1_o);
    sensitive << ( cal_conv_1_1_i );
    sensitive << ( cal_conv_1_2_i );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_cal_conv_1_1_o_ap_vld);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_cal_conv_1_2_o);
    sensitive << ( cal_conv_1_2_i );
    sensitive << ( ap_ce );
    sensitive << ( conv_line_buffer_loa_1_reg_196 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_cal_conv_1_2_o_ap_vld);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_cal_conv_2_0_o);
    sensitive << ( cal_conv_2_0_i );
    sensitive << ( cal_conv_2_1_i );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_cal_conv_2_0_o_ap_vld);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_cal_conv_2_1_o);
    sensitive << ( cal_conv_2_1_i );
    sensitive << ( cal_conv_2_2_i );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_cal_conv_2_1_o_ap_vld);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_cal_conv_2_2_o);
    sensitive << ( cal_conv_2_2_i );
    sensitive << ( ap_ce );
    sensitive << ( ap_port_reg_data );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_cal_conv_2_2_o_ap_vld);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_conv_line_buffer_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_conv_line_buffer_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_conv_line_buffer_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_conv_line_buffer_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_conv_line_buffer_d0);
    sensitive << ( reg_92 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_98 );
    sensitive << ( conv_line_buffer_loa_reg_190 );
    sensitive << ( conv_line_buffer_loa_1_reg_196 );
    sensitive << ( conv_line_buffer_loa_5_reg_207 );
    sensitive << ( conv_line_buffer_loa_7_reg_217 );
    sensitive << ( conv_line_buffer_loa_8_reg_222 );
    sensitive << ( conv_line_buffer_loa_11_reg_237 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_conv_line_buffer_d1);
    sensitive << ( cal_conv_1_0_i );
    sensitive << ( cal_conv_2_0_i );
    sensitive << ( reg_92 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_98 );
    sensitive << ( conv_line_buffer_loa_4_reg_202 );
    sensitive << ( conv_line_buffer_loa_6_reg_212 );
    sensitive << ( conv_line_buffer_loa_9_reg_227 );
    sensitive << ( conv_line_buffer_loa_10_reg_232 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_conv_line_buffer_we0);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_conv_line_buffer_we1);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    ap_CS_fsm = "000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "conv_line_buffer_shi_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data, "(port)data");
    sc_trace(mVcdFile, cal_conv_1_0_i, "(port)cal_conv_1_0_i");
    sc_trace(mVcdFile, cal_conv_1_0_o, "(port)cal_conv_1_0_o");
    sc_trace(mVcdFile, cal_conv_1_0_o_ap_vld, "(port)cal_conv_1_0_o_ap_vld");
    sc_trace(mVcdFile, cal_conv_2_0_i, "(port)cal_conv_2_0_i");
    sc_trace(mVcdFile, cal_conv_2_0_o, "(port)cal_conv_2_0_o");
    sc_trace(mVcdFile, cal_conv_2_0_o_ap_vld, "(port)cal_conv_2_0_o_ap_vld");
    sc_trace(mVcdFile, cal_conv_0_1_i, "(port)cal_conv_0_1_i");
    sc_trace(mVcdFile, cal_conv_0_1_o, "(port)cal_conv_0_1_o");
    sc_trace(mVcdFile, cal_conv_0_1_o_ap_vld, "(port)cal_conv_0_1_o_ap_vld");
    sc_trace(mVcdFile, cal_conv_0_0, "(port)cal_conv_0_0");
    sc_trace(mVcdFile, cal_conv_0_0_ap_vld, "(port)cal_conv_0_0_ap_vld");
    sc_trace(mVcdFile, cal_conv_0_2_i, "(port)cal_conv_0_2_i");
    sc_trace(mVcdFile, cal_conv_0_2_o, "(port)cal_conv_0_2_o");
    sc_trace(mVcdFile, cal_conv_0_2_o_ap_vld, "(port)cal_conv_0_2_o_ap_vld");
    sc_trace(mVcdFile, cal_conv_1_1_i, "(port)cal_conv_1_1_i");
    sc_trace(mVcdFile, cal_conv_1_1_o, "(port)cal_conv_1_1_o");
    sc_trace(mVcdFile, cal_conv_1_1_o_ap_vld, "(port)cal_conv_1_1_o_ap_vld");
    sc_trace(mVcdFile, cal_conv_1_2_i, "(port)cal_conv_1_2_i");
    sc_trace(mVcdFile, cal_conv_1_2_o, "(port)cal_conv_1_2_o");
    sc_trace(mVcdFile, cal_conv_1_2_o_ap_vld, "(port)cal_conv_1_2_o_ap_vld");
    sc_trace(mVcdFile, cal_conv_2_1_i, "(port)cal_conv_2_1_i");
    sc_trace(mVcdFile, cal_conv_2_1_o, "(port)cal_conv_2_1_o");
    sc_trace(mVcdFile, cal_conv_2_1_o_ap_vld, "(port)cal_conv_2_1_o_ap_vld");
    sc_trace(mVcdFile, cal_conv_2_2_i, "(port)cal_conv_2_2_i");
    sc_trace(mVcdFile, cal_conv_2_2_o, "(port)cal_conv_2_2_o");
    sc_trace(mVcdFile, cal_conv_2_2_o_ap_vld, "(port)cal_conv_2_2_o_ap_vld");
    sc_trace(mVcdFile, conv_line_buffer_address0, "(port)conv_line_buffer_address0");
    sc_trace(mVcdFile, conv_line_buffer_ce0, "(port)conv_line_buffer_ce0");
    sc_trace(mVcdFile, conv_line_buffer_we0, "(port)conv_line_buffer_we0");
    sc_trace(mVcdFile, conv_line_buffer_d0, "(port)conv_line_buffer_d0");
    sc_trace(mVcdFile, conv_line_buffer_q0, "(port)conv_line_buffer_q0");
    sc_trace(mVcdFile, conv_line_buffer_address1, "(port)conv_line_buffer_address1");
    sc_trace(mVcdFile, conv_line_buffer_ce1, "(port)conv_line_buffer_ce1");
    sc_trace(mVcdFile, conv_line_buffer_we1, "(port)conv_line_buffer_we1");
    sc_trace(mVcdFile, conv_line_buffer_d1, "(port)conv_line_buffer_d1");
    sc_trace(mVcdFile, conv_line_buffer_q1, "(port)conv_line_buffer_q1");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_92, "reg_92");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, reg_98, "reg_98");
    sc_trace(mVcdFile, conv_line_buffer_loa_reg_190, "conv_line_buffer_loa_reg_190");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, conv_line_buffer_loa_1_reg_196, "conv_line_buffer_loa_1_reg_196");
    sc_trace(mVcdFile, conv_line_buffer_loa_4_reg_202, "conv_line_buffer_loa_4_reg_202");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, conv_line_buffer_loa_5_reg_207, "conv_line_buffer_loa_5_reg_207");
    sc_trace(mVcdFile, conv_line_buffer_loa_6_reg_212, "conv_line_buffer_loa_6_reg_212");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, conv_line_buffer_loa_7_reg_217, "conv_line_buffer_loa_7_reg_217");
    sc_trace(mVcdFile, conv_line_buffer_loa_8_reg_222, "conv_line_buffer_loa_8_reg_222");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, conv_line_buffer_loa_9_reg_227, "conv_line_buffer_loa_9_reg_227");
    sc_trace(mVcdFile, conv_line_buffer_loa_10_reg_232, "conv_line_buffer_loa_10_reg_232");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, conv_line_buffer_loa_11_reg_237, "conv_line_buffer_loa_11_reg_237");
    sc_trace(mVcdFile, ap_port_reg_data, "ap_port_reg_data");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

conv_line_buffer_shi::~conv_line_buffer_shi() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void conv_line_buffer_shi::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ap_port_reg_data = data.read();
    }
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        conv_line_buffer_loa_10_reg_232 = conv_line_buffer_q0.read();
        conv_line_buffer_loa_11_reg_237 = conv_line_buffer_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        conv_line_buffer_loa_1_reg_196 = conv_line_buffer_q1.read();
        conv_line_buffer_loa_reg_190 = conv_line_buffer_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        conv_line_buffer_loa_4_reg_202 = conv_line_buffer_q0.read();
        conv_line_buffer_loa_5_reg_207 = conv_line_buffer_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        conv_line_buffer_loa_6_reg_212 = conv_line_buffer_q0.read();
        conv_line_buffer_loa_7_reg_217 = conv_line_buffer_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        conv_line_buffer_loa_8_reg_222 = conv_line_buffer_q0.read();
        conv_line_buffer_loa_9_reg_227 = conv_line_buffer_q1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
  esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        reg_92 = conv_line_buffer_q0.read();
        reg_98 = conv_line_buffer_q1.read();
    }
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void conv_line_buffer_shi::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void conv_line_buffer_shi::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_cal_conv_0_0() {
    cal_conv_0_0 = cal_conv_0_1_i.read();
}

void conv_line_buffer_shi::thread_cal_conv_0_0_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        cal_conv_0_0_ap_vld = ap_const_logic_1;
    } else {
        cal_conv_0_0_ap_vld = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_cal_conv_0_1_o() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        cal_conv_0_1_o = cal_conv_0_2_i.read();
    } else {
        cal_conv_0_1_o = cal_conv_0_1_i.read();
    }
}

void conv_line_buffer_shi::thread_cal_conv_0_1_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        cal_conv_0_1_o_ap_vld = ap_const_logic_1;
    } else {
        cal_conv_0_1_o_ap_vld = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_cal_conv_0_2_o() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        cal_conv_0_2_o = conv_line_buffer_loa_reg_190.read();
    } else {
        cal_conv_0_2_o = cal_conv_0_2_i.read();
    }
}

void conv_line_buffer_shi::thread_cal_conv_0_2_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        cal_conv_0_2_o_ap_vld = ap_const_logic_1;
    } else {
        cal_conv_0_2_o_ap_vld = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_cal_conv_1_0_o() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        cal_conv_1_0_o = cal_conv_1_1_i.read();
    } else {
        cal_conv_1_0_o = cal_conv_1_0_i.read();
    }
}

void conv_line_buffer_shi::thread_cal_conv_1_0_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        cal_conv_1_0_o_ap_vld = ap_const_logic_1;
    } else {
        cal_conv_1_0_o_ap_vld = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_cal_conv_1_1_o() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        cal_conv_1_1_o = cal_conv_1_2_i.read();
    } else {
        cal_conv_1_1_o = cal_conv_1_1_i.read();
    }
}

void conv_line_buffer_shi::thread_cal_conv_1_1_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        cal_conv_1_1_o_ap_vld = ap_const_logic_1;
    } else {
        cal_conv_1_1_o_ap_vld = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_cal_conv_1_2_o() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        cal_conv_1_2_o = conv_line_buffer_loa_1_reg_196.read();
    } else {
        cal_conv_1_2_o = cal_conv_1_2_i.read();
    }
}

void conv_line_buffer_shi::thread_cal_conv_1_2_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        cal_conv_1_2_o_ap_vld = ap_const_logic_1;
    } else {
        cal_conv_1_2_o_ap_vld = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_cal_conv_2_0_o() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        cal_conv_2_0_o = cal_conv_2_1_i.read();
    } else {
        cal_conv_2_0_o = cal_conv_2_0_i.read();
    }
}

void conv_line_buffer_shi::thread_cal_conv_2_0_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        cal_conv_2_0_o_ap_vld = ap_const_logic_1;
    } else {
        cal_conv_2_0_o_ap_vld = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_cal_conv_2_1_o() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        cal_conv_2_1_o = cal_conv_2_2_i.read();
    } else {
        cal_conv_2_1_o = cal_conv_2_1_i.read();
    }
}

void conv_line_buffer_shi::thread_cal_conv_2_1_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        cal_conv_2_1_o_ap_vld = ap_const_logic_1;
    } else {
        cal_conv_2_1_o_ap_vld = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_cal_conv_2_2_o() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        cal_conv_2_2_o = ap_port_reg_data.read();
    } else {
        cal_conv_2_2_o = cal_conv_2_2_i.read();
    }
}

void conv_line_buffer_shi::thread_cal_conv_2_2_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        cal_conv_2_2_o_ap_vld = ap_const_logic_1;
    } else {
        cal_conv_2_2_o_ap_vld = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_conv_line_buffer_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        conv_line_buffer_address0 = ap_const_lv4_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        conv_line_buffer_address0 = ap_const_lv4_8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        conv_line_buffer_address0 = ap_const_lv4_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        conv_line_buffer_address0 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        conv_line_buffer_address0 = ap_const_lv4_E;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        conv_line_buffer_address0 = ap_const_lv4_C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        conv_line_buffer_address0 = ap_const_lv4_9;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        conv_line_buffer_address0 = ap_const_lv4_6;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        conv_line_buffer_address0 = ap_const_lv4_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        conv_line_buffer_address0 = ap_const_lv4_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        conv_line_buffer_address0 = ap_const_lv4_3;
    } else {
        conv_line_buffer_address0 = "XXXX";
    }
}

void conv_line_buffer_shi::thread_conv_line_buffer_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        conv_line_buffer_address1 = ap_const_lv4_9;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        conv_line_buffer_address1 = ap_const_lv4_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        conv_line_buffer_address1 = ap_const_lv4_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        conv_line_buffer_address1 = ap_const_lv4_F;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        conv_line_buffer_address1 = ap_const_lv4_D;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        conv_line_buffer_address1 = ap_const_lv4_A;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        conv_line_buffer_address1 = ap_const_lv4_7;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        conv_line_buffer_address1 = ap_const_lv4_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        conv_line_buffer_address1 = ap_const_lv4_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        conv_line_buffer_address1 = ap_const_lv4_B;
    } else {
        conv_line_buffer_address1 = "XXXX";
    }
}

void conv_line_buffer_shi::thread_conv_line_buffer_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())))) {
        conv_line_buffer_ce0 = ap_const_logic_1;
    } else {
        conv_line_buffer_ce0 = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_conv_line_buffer_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())))) {
        conv_line_buffer_ce1 = ap_const_logic_1;
    } else {
        conv_line_buffer_ce1 = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_conv_line_buffer_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        conv_line_buffer_d0 = reg_98.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        conv_line_buffer_d0 = conv_line_buffer_loa_11_reg_237.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        conv_line_buffer_d0 = conv_line_buffer_loa_1_reg_196.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        conv_line_buffer_d0 = conv_line_buffer_loa_8_reg_222.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        conv_line_buffer_d0 = conv_line_buffer_loa_7_reg_217.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        conv_line_buffer_d0 = conv_line_buffer_loa_5_reg_207.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        conv_line_buffer_d0 = conv_line_buffer_loa_reg_190.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        conv_line_buffer_d0 = reg_92.read();
    } else {
        conv_line_buffer_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void conv_line_buffer_shi::thread_conv_line_buffer_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        conv_line_buffer_d1 = cal_conv_2_0_i.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        conv_line_buffer_d1 = reg_92.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        conv_line_buffer_d1 = conv_line_buffer_loa_10_reg_232.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        conv_line_buffer_d1 = conv_line_buffer_loa_9_reg_227.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        conv_line_buffer_d1 = cal_conv_1_0_i.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        conv_line_buffer_d1 = conv_line_buffer_loa_6_reg_212.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        conv_line_buffer_d1 = conv_line_buffer_loa_4_reg_202.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        conv_line_buffer_d1 = reg_98.read();
    } else {
        conv_line_buffer_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void conv_line_buffer_shi::thread_conv_line_buffer_we0() {
    if (((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())))) {
        conv_line_buffer_we0 = ap_const_logic_1;
    } else {
        conv_line_buffer_we0 = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_conv_line_buffer_we1() {
    if (((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())))) {
        conv_line_buffer_we1 = ap_const_logic_1;
    } else {
        conv_line_buffer_we1 = ap_const_logic_0;
    }
}

void conv_line_buffer_shi::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<15>) ("XXXXXXXXXXXXXXX");
            break;
    }
}

}

