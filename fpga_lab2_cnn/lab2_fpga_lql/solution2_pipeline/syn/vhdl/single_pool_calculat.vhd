-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity single_pool_calculat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    cal_pool_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    cal_pool_ce0 : OUT STD_LOGIC;
    cal_pool_q0 : IN STD_LOGIC_VECTOR (unknown downto unknown);
    cal_pool_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    cal_pool_ce1 : OUT STD_LOGIC;
    cal_pool_q1 : IN STD_LOGIC_VECTOR (unknown downto unknown);
    ap_return : OUT STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of single_pool_calculat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal select_ln48_1_fu_72_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln48_1_reg_182 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln48_2_fu_93_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln48_2_reg_188 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal trunc_ln48_3_fu_104_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln48_3_reg_193 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln48_2_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_2_reg_198 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_4_fu_133_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln48_4_reg_203 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln48_5_fu_145_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln48_5_reg_208 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln48_4_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_4_reg_213 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal trunc_ln48_fu_38_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_42_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_42_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln48_fu_38_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln48_fu_50_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln48_1_fu_62_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln48_fu_58_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_fu_66_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln48_1_fu_62_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln48_2_fu_83_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln48_1_fu_80_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_1_fu_87_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_1_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln48_2_fu_83_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln48_3_fu_104_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln48_2_fu_100_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_2_fu_108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln48_3_fu_114_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln48_4_fu_123_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln48_3_fu_119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_3_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_3_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln48_4_fu_123_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln48_5_fu_145_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln48_4_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_4_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln48_5_fu_155_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln48_6_fu_164_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln48_5_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_5_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_5_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln48_6_fu_164_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln48_2_reg_198 <= icmp_ln48_2_fu_108_p2;
                select_ln48_2_reg_188 <= select_ln48_2_fu_93_p3;
                trunc_ln48_3_reg_193 <= trunc_ln48_3_fu_104_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                icmp_ln48_4_reg_213 <= icmp_ln48_4_fu_149_p2;
                select_ln48_4_reg_203 <= select_ln48_4_fu_133_p3;
                trunc_ln48_5_reg_208 <= trunc_ln48_5_fu_145_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln48_1_reg_182 <= select_ln48_1_fu_72_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        select_ln48_5_fu_155_p3 when (icmp_ln48_5_fu_168_p2(0) = '1') else 
        trunc_ln48_6_fu_164_p1;

    cal_pool_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)))) then 
            cal_pool_address0 <= ap_const_lv1_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            cal_pool_address0 <= ap_const_lv1_0;
        else 
            cal_pool_address0 <= "X";
        end if; 
    end process;


    cal_pool_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            cal_pool_address1 <= ap_const_lv1_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            cal_pool_address1 <= ap_const_lv1_0;
        else 
            cal_pool_address1 <= "X";
        end if; 
    end process;


    cal_pool_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            cal_pool_ce0 <= ap_const_logic_1;
        else 
            cal_pool_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cal_pool_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            cal_pool_ce1 <= ap_const_logic_1;
        else 
            cal_pool_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln48_1_fu_87_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q0),32));
    icmp_ln48_1_fu_87_p2 <= "1" when (signed(zext_ln48_1_fu_80_p1) > signed(icmp_ln48_1_fu_87_p1)) else "0";
    icmp_ln48_2_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q1),32));
    icmp_ln48_2_fu_108_p2 <= "1" when (signed(zext_ln48_2_fu_100_p1) > signed(icmp_ln48_2_fu_108_p1)) else "0";
    icmp_ln48_3_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q0),32));
    icmp_ln48_3_fu_127_p2 <= "1" when (signed(zext_ln48_3_fu_119_p1) > signed(icmp_ln48_3_fu_127_p1)) else "0";
    icmp_ln48_4_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q1),32));
    icmp_ln48_4_fu_149_p2 <= "1" when (signed(zext_ln48_4_fu_141_p1) > signed(icmp_ln48_4_fu_149_p1)) else "0";
    icmp_ln48_5_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q0),32));
    icmp_ln48_5_fu_168_p2 <= "1" when (signed(zext_ln48_5_fu_160_p1) > signed(icmp_ln48_5_fu_168_p1)) else "0";
    icmp_ln48_fu_66_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q1),32));
    icmp_ln48_fu_66_p2 <= "1" when (signed(zext_ln48_fu_58_p1) > signed(icmp_ln48_fu_66_p1)) else "0";
    select_ln48_1_fu_72_p3 <= 
        select_ln48_fu_50_p3 when (icmp_ln48_fu_66_p2(0) = '1') else 
        trunc_ln48_1_fu_62_p1;
    select_ln48_2_fu_93_p3 <= 
        select_ln48_1_reg_182 when (icmp_ln48_1_fu_87_p2(0) = '1') else 
        trunc_ln48_2_fu_83_p1;
    select_ln48_3_fu_114_p3 <= 
        select_ln48_2_reg_188 when (icmp_ln48_2_reg_198(0) = '1') else 
        trunc_ln48_3_reg_193;
    select_ln48_4_fu_133_p3 <= 
        select_ln48_3_fu_114_p3 when (icmp_ln48_3_fu_127_p2(0) = '1') else 
        trunc_ln48_4_fu_123_p1;
    select_ln48_5_fu_155_p3 <= 
        select_ln48_4_reg_203 when (icmp_ln48_4_reg_213(0) = '1') else 
        trunc_ln48_5_reg_208;
    select_ln48_fu_50_p3 <= 
        ap_const_lv31_0 when (tmp_fu_42_p3(0) = '1') else 
        trunc_ln48_fu_38_p1;
    tmp_fu_42_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q0),32));
    tmp_fu_42_p3 <= tmp_fu_42_p1(31 downto 31);
    trunc_ln48_1_fu_62_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q1),32));
    trunc_ln48_1_fu_62_p1 <= trunc_ln48_1_fu_62_p0(31 - 1 downto 0);
    trunc_ln48_2_fu_83_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q0),32));
    trunc_ln48_2_fu_83_p1 <= trunc_ln48_2_fu_83_p0(31 - 1 downto 0);
    trunc_ln48_3_fu_104_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q1),32));
    trunc_ln48_3_fu_104_p1 <= trunc_ln48_3_fu_104_p0(31 - 1 downto 0);
    trunc_ln48_4_fu_123_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q0),32));
    trunc_ln48_4_fu_123_p1 <= trunc_ln48_4_fu_123_p0(31 - 1 downto 0);
    trunc_ln48_5_fu_145_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q1),32));
    trunc_ln48_5_fu_145_p1 <= trunc_ln48_5_fu_145_p0(31 - 1 downto 0);
    trunc_ln48_6_fu_164_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q0),32));
    trunc_ln48_6_fu_164_p1 <= trunc_ln48_6_fu_164_p0(31 - 1 downto 0);
    trunc_ln48_fu_38_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cal_pool_q0),32));
    trunc_ln48_fu_38_p1 <= trunc_ln48_fu_38_p0(31 - 1 downto 0);
    zext_ln48_1_fu_80_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_1_reg_182),32));
    zext_ln48_2_fu_100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_2_fu_93_p3),32));
    zext_ln48_3_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_3_fu_114_p3),32));
    zext_ln48_4_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_4_fu_133_p3),32));
    zext_ln48_5_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_5_fu_155_p3),32));
    zext_ln48_fu_58_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_fu_50_p3),32));
end behav;
