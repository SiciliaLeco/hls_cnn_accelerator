// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "pool_line_buffer_shi.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic pool_line_buffer_shi::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic pool_line_buffer_shi::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> pool_line_buffer_shi::ap_ST_fsm_state1 = "1";
const sc_lv<6> pool_line_buffer_shi::ap_ST_fsm_state2 = "10";
const sc_lv<6> pool_line_buffer_shi::ap_ST_fsm_state3 = "100";
const sc_lv<6> pool_line_buffer_shi::ap_ST_fsm_state4 = "1000";
const sc_lv<6> pool_line_buffer_shi::ap_ST_fsm_state5 = "10000";
const sc_lv<6> pool_line_buffer_shi::ap_ST_fsm_state6 = "100000";
const sc_lv<32> pool_line_buffer_shi::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> pool_line_buffer_shi::ap_const_lv32_1 = "1";
const sc_lv<32> pool_line_buffer_shi::ap_const_lv32_3 = "11";
const sc_lv<32> pool_line_buffer_shi::ap_const_lv32_2 = "10";
const sc_lv<1> pool_line_buffer_shi::ap_const_lv1_1 = "1";
const sc_lv<1> pool_line_buffer_shi::ap_const_lv1_0 = "0";
const sc_lv<3> pool_line_buffer_shi::ap_const_lv3_2 = "10";
const sc_lv<3> pool_line_buffer_shi::ap_const_lv3_1 = "1";
const sc_lv<3> pool_line_buffer_shi::ap_const_lv3_3 = "11";
const sc_lv<3> pool_line_buffer_shi::ap_const_lv3_4 = "100";
const sc_lv<3> pool_line_buffer_shi::ap_const_lv3_0 = "000";
const sc_lv<3> pool_line_buffer_shi::ap_const_lv3_5 = "101";
const sc_lv<32> pool_line_buffer_shi::ap_const_lv32_4 = "100";
const sc_lv<32> pool_line_buffer_shi::ap_const_lv32_5 = "101";
const bool pool_line_buffer_shi::ap_const_boolean_1 = true;

pool_line_buffer_shi::pool_line_buffer_shi(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_cal_pool_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cal_pool_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cal_pool_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cal_pool_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cal_pool_d0);
    sensitive << ( cal_pool_q1 );
    sensitive << ( reg_71 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_port_reg_data );

    SC_METHOD(thread_cal_pool_d1);
    sensitive << ( cal_pool_q1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cal_pool_we0);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cal_pool_we1);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_pool_line_buffer_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_pool_line_buffer_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_pool_line_buffer_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_pool_line_buffer_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_pool_line_buffer_d0);
    sensitive << ( reg_71 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( reg_79 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( go_up_reg_86 );
    sensitive << ( pool_line_buffer_loa_3_reg_91 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_pool_line_buffer_d1);
    sensitive << ( reg_71 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( reg_79 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_pool_line_buffer_we0);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_pool_line_buffer_we1);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "pool_line_buffer_shi_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data, "(port)data");
    sc_trace(mVcdFile, cal_pool_address0, "(port)cal_pool_address0");
    sc_trace(mVcdFile, cal_pool_ce0, "(port)cal_pool_ce0");
    sc_trace(mVcdFile, cal_pool_we0, "(port)cal_pool_we0");
    sc_trace(mVcdFile, cal_pool_d0, "(port)cal_pool_d0");
    sc_trace(mVcdFile, cal_pool_q0, "(port)cal_pool_q0");
    sc_trace(mVcdFile, cal_pool_address1, "(port)cal_pool_address1");
    sc_trace(mVcdFile, cal_pool_ce1, "(port)cal_pool_ce1");
    sc_trace(mVcdFile, cal_pool_we1, "(port)cal_pool_we1");
    sc_trace(mVcdFile, cal_pool_d1, "(port)cal_pool_d1");
    sc_trace(mVcdFile, cal_pool_q1, "(port)cal_pool_q1");
    sc_trace(mVcdFile, pool_line_buffer_address0, "(port)pool_line_buffer_address0");
    sc_trace(mVcdFile, pool_line_buffer_ce0, "(port)pool_line_buffer_ce0");
    sc_trace(mVcdFile, pool_line_buffer_we0, "(port)pool_line_buffer_we0");
    sc_trace(mVcdFile, pool_line_buffer_d0, "(port)pool_line_buffer_d0");
    sc_trace(mVcdFile, pool_line_buffer_q0, "(port)pool_line_buffer_q0");
    sc_trace(mVcdFile, pool_line_buffer_address1, "(port)pool_line_buffer_address1");
    sc_trace(mVcdFile, pool_line_buffer_ce1, "(port)pool_line_buffer_ce1");
    sc_trace(mVcdFile, pool_line_buffer_we1, "(port)pool_line_buffer_we1");
    sc_trace(mVcdFile, pool_line_buffer_d1, "(port)pool_line_buffer_d1");
    sc_trace(mVcdFile, pool_line_buffer_q1, "(port)pool_line_buffer_q1");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_71, "reg_71");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, reg_79, "reg_79");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, go_up_reg_86, "go_up_reg_86");
    sc_trace(mVcdFile, pool_line_buffer_loa_3_reg_91, "pool_line_buffer_loa_3_reg_91");
    sc_trace(mVcdFile, ap_port_reg_data, "ap_port_reg_data");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

pool_line_buffer_shi::~pool_line_buffer_shi() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void pool_line_buffer_shi::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            reg_71 = pool_line_buffer_q1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            reg_71 = pool_line_buffer_q0.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            reg_79 = pool_line_buffer_q0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            reg_79 = pool_line_buffer_q1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ap_port_reg_data = data.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        go_up_reg_86 =  (sc_lv<32>) (cal_pool_q0.read());
    }
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        pool_line_buffer_loa_3_reg_91 = pool_line_buffer_q1.read();
    }
}

void pool_line_buffer_shi::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void pool_line_buffer_shi::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void pool_line_buffer_shi::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void pool_line_buffer_shi::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void pool_line_buffer_shi::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void pool_line_buffer_shi::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void pool_line_buffer_shi::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void pool_line_buffer_shi::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void pool_line_buffer_shi::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void pool_line_buffer_shi::thread_cal_pool_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        cal_pool_address0 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        cal_pool_address0 = ap_const_lv1_1;
    } else {
        cal_pool_address0 = "X";
    }
}

void pool_line_buffer_shi::thread_cal_pool_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        cal_pool_address1 = ap_const_lv1_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cal_pool_address1 = ap_const_lv1_0;
    } else {
        cal_pool_address1 = "X";
    }
}

void pool_line_buffer_shi::thread_cal_pool_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cal_pool_ce0 = ap_const_logic_1;
    } else {
        cal_pool_ce0 = ap_const_logic_0;
    }
}

void pool_line_buffer_shi::thread_cal_pool_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cal_pool_ce1 = ap_const_logic_1;
    } else {
        cal_pool_ce1 = ap_const_logic_0;
    }
}

void pool_line_buffer_shi::thread_cal_pool_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cal_pool_d0 =  (sc_lv<0>) (ap_port_reg_data.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cal_pool_d0 =  (sc_lv<0>) (reg_71.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cal_pool_d0 = cal_pool_q1.read();
    } else {
        cal_pool_d0 =  (sc_lv<0>) ("");
    }
}

void pool_line_buffer_shi::thread_cal_pool_d1() {
    cal_pool_d1 = cal_pool_q1.read();
}

void pool_line_buffer_shi::thread_cal_pool_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())))) {
        cal_pool_we0 = ap_const_logic_1;
    } else {
        cal_pool_we0 = ap_const_logic_0;
    }
}

void pool_line_buffer_shi::thread_cal_pool_we1() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        cal_pool_we1 = ap_const_logic_1;
    } else {
        cal_pool_we1 = ap_const_logic_0;
    }
}

void pool_line_buffer_shi::thread_pool_line_buffer_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        pool_line_buffer_address0 = ap_const_lv3_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pool_line_buffer_address0 = ap_const_lv3_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pool_line_buffer_address0 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        pool_line_buffer_address0 = ap_const_lv3_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        pool_line_buffer_address0 = ap_const_lv3_2;
    } else {
        pool_line_buffer_address0 =  (sc_lv<3>) ("XXX");
    }
}

void pool_line_buffer_shi::thread_pool_line_buffer_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pool_line_buffer_address1 = ap_const_lv3_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pool_line_buffer_address1 = ap_const_lv3_5;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        pool_line_buffer_address1 = ap_const_lv3_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        pool_line_buffer_address1 = ap_const_lv3_1;
    } else {
        pool_line_buffer_address1 =  (sc_lv<3>) ("XXX");
    }
}

void pool_line_buffer_shi::thread_pool_line_buffer_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())))) {
        pool_line_buffer_ce0 = ap_const_logic_1;
    } else {
        pool_line_buffer_ce0 = ap_const_logic_0;
    }
}

void pool_line_buffer_shi::thread_pool_line_buffer_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())))) {
        pool_line_buffer_ce1 = ap_const_logic_1;
    } else {
        pool_line_buffer_ce1 = ap_const_logic_0;
    }
}

void pool_line_buffer_shi::thread_pool_line_buffer_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        pool_line_buffer_d0 = go_up_reg_86.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        pool_line_buffer_d0 = pool_line_buffer_loa_3_reg_91.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pool_line_buffer_d0 = reg_71.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pool_line_buffer_d0 = reg_79.read();
    } else {
        pool_line_buffer_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pool_line_buffer_shi::thread_pool_line_buffer_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        pool_line_buffer_d1 = reg_71.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pool_line_buffer_d1 = reg_79.read();
    } else {
        pool_line_buffer_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void pool_line_buffer_shi::thread_pool_line_buffer_we0() {
    if (((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())))) {
        pool_line_buffer_we0 = ap_const_logic_1;
    } else {
        pool_line_buffer_we0 = ap_const_logic_0;
    }
}

void pool_line_buffer_shi::thread_pool_line_buffer_we1() {
    if (((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())))) {
        pool_line_buffer_we1 = ap_const_logic_1;
    } else {
        pool_line_buffer_we1 = ap_const_logic_0;
    }
}

void pool_line_buffer_shi::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

