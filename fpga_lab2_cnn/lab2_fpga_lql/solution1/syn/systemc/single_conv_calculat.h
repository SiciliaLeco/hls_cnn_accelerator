// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _single_conv_calculat_HH_
#define _single_conv_calculat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct single_conv_calculat : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > cal_conv_address0;
    sc_out< sc_logic > cal_conv_ce0;
    sc_in< sc_lv<32> > cal_conv_q0;
    sc_out< sc_lv<4> > kernel_address0;
    sc_out< sc_logic > kernel_ce0;
    sc_in< sc_lv<32> > kernel_q0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    single_conv_calculat(sc_module_name name);
    SC_HAS_PROCESS(single_conv_calculat);

    ~single_conv_calculat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > i_fu_88_p2;
    sc_signal< sc_lv<2> > i_reg_167;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > sub_ln35_fu_110_p2;
    sc_signal< sc_lv<5> > sub_ln35_reg_172;
    sc_signal< sc_lv<1> > icmp_ln31_fu_82_p2;
    sc_signal< sc_lv<2> > j_fu_122_p2;
    sc_signal< sc_lv<2> > j_reg_180;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln33_fu_116_p2;
    sc_signal< sc_lv<32> > cal_conv_load_reg_195;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > kernel_load_reg_200;
    sc_signal< sc_lv<32> > mul_ln35_fu_143_p2;
    sc_signal< sc_lv<32> > mul_ln35_reg_205;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<2> > i_0_reg_52;
    sc_signal< sc_lv<2> > j_0_reg_63;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > sext_ln35_fu_137_p1;
    sc_signal< sc_lv<32> > ans_1_fu_22;
    sc_signal< sc_lv<32> > ans_fu_147_p2;
    sc_signal< sc_lv<4> > tmp_fu_98_p3;
    sc_signal< sc_lv<5> > zext_ln35_1_fu_106_p1;
    sc_signal< sc_lv<5> > zext_ln35_fu_94_p1;
    sc_signal< sc_lv<5> > zext_ln35_2_fu_128_p1;
    sc_signal< sc_lv<5> > add_ln35_fu_132_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln35_fu_132_p2();
    void thread_ans_fu_147_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_cal_conv_address0();
    void thread_cal_conv_ce0();
    void thread_i_fu_88_p2();
    void thread_icmp_ln31_fu_82_p2();
    void thread_icmp_ln33_fu_116_p2();
    void thread_j_fu_122_p2();
    void thread_kernel_address0();
    void thread_kernel_ce0();
    void thread_mul_ln35_fu_143_p2();
    void thread_sext_ln35_fu_137_p1();
    void thread_sub_ln35_fu_110_p2();
    void thread_tmp_fu_98_p3();
    void thread_zext_ln35_1_fu_106_p1();
    void thread_zext_ln35_2_fu_128_p1();
    void thread_zext_ln35_fu_94_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
