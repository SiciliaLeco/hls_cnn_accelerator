// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module single_conv_calculat (
        ap_clk,
        ap_rst,
        cal_conv_0_0,
        kernel_0_0,
        cal_conv_0_1,
        kernel_0_1,
        cal_conv_0_2,
        kernel_0_2,
        cal_conv_1_0,
        kernel_1_0,
        cal_conv_1_1,
        kernel_1_1,
        cal_conv_1_2,
        kernel_1_2,
        cal_conv_2_0,
        kernel_2_0,
        cal_conv_2_1,
        kernel_2_1,
        cal_conv_2_2,
        kernel_2_2,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] cal_conv_0_0;
input  [31:0] kernel_0_0;
input  [31:0] cal_conv_0_1;
input  [31:0] kernel_0_1;
input  [31:0] cal_conv_0_2;
input  [31:0] kernel_0_2;
input  [31:0] cal_conv_1_0;
input  [31:0] kernel_1_0;
input  [31:0] cal_conv_1_1;
input  [31:0] kernel_1_1;
input  [31:0] cal_conv_1_2;
input  [31:0] kernel_1_2;
input  [31:0] cal_conv_2_0;
input  [31:0] kernel_2_0;
input  [31:0] cal_conv_2_1;
input  [31:0] kernel_2_1;
input  [31:0] cal_conv_2_2;
input  [31:0] kernel_2_2;
output  [31:0] ap_return;
input   ap_ce;

reg[31:0] ap_return;

wire   [31:0] mul_ln34_6_fu_44_p2;
reg   [31:0] mul_ln34_6_reg_199;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] mul_ln34_7_fu_58_p2;
reg   [31:0] mul_ln34_7_reg_204;
wire   [31:0] mul_ln34_8_fu_72_p2;
reg   [31:0] mul_ln34_8_reg_209;
wire   [31:0] mul_ln34_4_fu_86_p2;
reg   [31:0] mul_ln34_4_reg_214;
wire   [31:0] mul_ln34_5_fu_100_p2;
reg   [31:0] mul_ln34_5_reg_219;
wire   [31:0] add_ln34_5_fu_110_p2;
reg   [31:0] add_ln34_5_reg_224;
wire   [31:0] mul_ln34_fu_123_p2;
reg   [31:0] mul_ln34_reg_229;
wire   [31:0] mul_ln34_1_fu_137_p2;
reg   [31:0] mul_ln34_1_reg_234;
wire   [31:0] mul_ln34_2_fu_151_p2;
reg   [31:0] mul_ln34_2_reg_239;
wire   [31:0] mul_ln34_3_fu_165_p2;
reg   [31:0] mul_ln34_3_reg_244;
wire   [31:0] add_ln34_6_fu_175_p2;
reg   [31:0] add_ln34_6_reg_249;
wire  signed [31:0] mul_ln34_6_fu_44_p0;
wire  signed [31:0] mul_ln34_6_fu_44_p1;
wire    ap_block_pp0_stage0;
wire  signed [31:0] mul_ln34_7_fu_58_p0;
wire  signed [31:0] mul_ln34_7_fu_58_p1;
wire  signed [31:0] mul_ln34_8_fu_72_p0;
wire  signed [31:0] mul_ln34_8_fu_72_p1;
wire  signed [31:0] mul_ln34_4_fu_86_p0;
wire  signed [31:0] mul_ln34_4_fu_86_p1;
wire  signed [31:0] mul_ln34_5_fu_100_p0;
wire  signed [31:0] mul_ln34_5_fu_100_p1;
wire   [31:0] add_ln34_4_fu_106_p2;
wire  signed [31:0] mul_ln34_fu_123_p0;
wire  signed [31:0] mul_ln34_fu_123_p1;
wire  signed [31:0] mul_ln34_1_fu_137_p0;
wire  signed [31:0] mul_ln34_1_fu_137_p1;
wire  signed [31:0] mul_ln34_2_fu_151_p0;
wire  signed [31:0] mul_ln34_2_fu_151_p1;
wire  signed [31:0] mul_ln34_3_fu_165_p0;
wire  signed [31:0] mul_ln34_3_fu_165_p1;
wire   [31:0] add_ln34_3_fu_171_p2;
wire   [31:0] add_ln34_1_fu_184_p2;
wire   [31:0] add_ln34_fu_180_p2;
wire   [31:0] add_ln34_2_fu_188_p2;
wire   [31:0] add_ln34_7_fu_194_p2;
reg    ap_ce_reg;
reg   [31:0] cal_conv_0_0_int_reg;
reg   [31:0] kernel_0_0_int_reg;
reg   [31:0] cal_conv_0_1_int_reg;
reg   [31:0] kernel_0_1_int_reg;
reg   [31:0] cal_conv_0_2_int_reg;
reg   [31:0] kernel_0_2_int_reg;
reg   [31:0] cal_conv_1_0_int_reg;
reg   [31:0] kernel_1_0_int_reg;
reg   [31:0] cal_conv_1_1_int_reg;
reg   [31:0] kernel_1_1_int_reg;
reg   [31:0] cal_conv_1_2_int_reg;
reg   [31:0] kernel_1_2_int_reg;
reg   [31:0] cal_conv_2_0_int_reg;
reg   [31:0] kernel_2_0_int_reg;
reg   [31:0] cal_conv_2_1_int_reg;
reg   [31:0] kernel_2_1_int_reg;
reg   [31:0] cal_conv_2_2_int_reg;
reg   [31:0] kernel_2_2_int_reg;
reg   [31:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        add_ln34_5_reg_224 <= add_ln34_5_fu_110_p2;
        add_ln34_6_reg_249 <= add_ln34_6_fu_175_p2;
        mul_ln34_1_reg_234 <= mul_ln34_1_fu_137_p2;
        mul_ln34_2_reg_239 <= mul_ln34_2_fu_151_p2;
        mul_ln34_3_reg_244 <= mul_ln34_3_fu_165_p2;
        mul_ln34_4_reg_214 <= mul_ln34_4_fu_86_p2;
        mul_ln34_5_reg_219 <= mul_ln34_5_fu_100_p2;
        mul_ln34_6_reg_199 <= mul_ln34_6_fu_44_p2;
        mul_ln34_7_reg_204 <= mul_ln34_7_fu_58_p2;
        mul_ln34_8_reg_209 <= mul_ln34_8_fu_72_p2;
        mul_ln34_reg_229 <= mul_ln34_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= add_ln34_7_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        cal_conv_0_0_int_reg <= cal_conv_0_0;
        cal_conv_0_1_int_reg <= cal_conv_0_1;
        cal_conv_0_2_int_reg <= cal_conv_0_2;
        cal_conv_1_0_int_reg <= cal_conv_1_0;
        cal_conv_1_1_int_reg <= cal_conv_1_1;
        cal_conv_1_2_int_reg <= cal_conv_1_2;
        cal_conv_2_0_int_reg <= cal_conv_2_0;
        cal_conv_2_1_int_reg <= cal_conv_2_1;
        cal_conv_2_2_int_reg <= cal_conv_2_2;
        kernel_0_0_int_reg <= kernel_0_0;
        kernel_0_1_int_reg <= kernel_0_1;
        kernel_0_2_int_reg <= kernel_0_2;
        kernel_1_0_int_reg <= kernel_1_0;
        kernel_1_1_int_reg <= kernel_1_1;
        kernel_1_2_int_reg <= kernel_1_2;
        kernel_2_0_int_reg <= kernel_2_0;
        kernel_2_1_int_reg <= kernel_2_1;
        kernel_2_2_int_reg <= kernel_2_2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = add_ln34_7_fu_194_p2;
    end
end

assign add_ln34_1_fu_184_p2 = (mul_ln34_2_reg_239 + mul_ln34_3_reg_244);

assign add_ln34_2_fu_188_p2 = (add_ln34_1_fu_184_p2 + add_ln34_fu_180_p2);

assign add_ln34_3_fu_171_p2 = (mul_ln34_4_reg_214 + mul_ln34_5_reg_219);

assign add_ln34_4_fu_106_p2 = (mul_ln34_7_reg_204 + mul_ln34_8_reg_209);

assign add_ln34_5_fu_110_p2 = (add_ln34_4_fu_106_p2 + mul_ln34_6_reg_199);

assign add_ln34_6_fu_175_p2 = (add_ln34_5_reg_224 + add_ln34_3_fu_171_p2);

assign add_ln34_7_fu_194_p2 = (add_ln34_6_reg_249 + add_ln34_2_fu_188_p2);

assign add_ln34_fu_180_p2 = (mul_ln34_reg_229 + mul_ln34_1_reg_234);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign mul_ln34_1_fu_137_p0 = cal_conv_0_1_int_reg;

assign mul_ln34_1_fu_137_p1 = kernel_0_1_int_reg;

assign mul_ln34_1_fu_137_p2 = ($signed(mul_ln34_1_fu_137_p0) * $signed(mul_ln34_1_fu_137_p1));

assign mul_ln34_2_fu_151_p0 = cal_conv_0_2_int_reg;

assign mul_ln34_2_fu_151_p1 = kernel_0_2_int_reg;

assign mul_ln34_2_fu_151_p2 = ($signed(mul_ln34_2_fu_151_p0) * $signed(mul_ln34_2_fu_151_p1));

assign mul_ln34_3_fu_165_p0 = cal_conv_1_0_int_reg;

assign mul_ln34_3_fu_165_p1 = kernel_1_0_int_reg;

assign mul_ln34_3_fu_165_p2 = ($signed(mul_ln34_3_fu_165_p0) * $signed(mul_ln34_3_fu_165_p1));

assign mul_ln34_4_fu_86_p0 = cal_conv_1_1_int_reg;

assign mul_ln34_4_fu_86_p1 = kernel_1_1_int_reg;

assign mul_ln34_4_fu_86_p2 = ($signed(mul_ln34_4_fu_86_p0) * $signed(mul_ln34_4_fu_86_p1));

assign mul_ln34_5_fu_100_p0 = cal_conv_1_2_int_reg;

assign mul_ln34_5_fu_100_p1 = kernel_1_2_int_reg;

assign mul_ln34_5_fu_100_p2 = ($signed(mul_ln34_5_fu_100_p0) * $signed(mul_ln34_5_fu_100_p1));

assign mul_ln34_6_fu_44_p0 = cal_conv_2_0_int_reg;

assign mul_ln34_6_fu_44_p1 = kernel_2_0_int_reg;

assign mul_ln34_6_fu_44_p2 = ($signed(mul_ln34_6_fu_44_p0) * $signed(mul_ln34_6_fu_44_p1));

assign mul_ln34_7_fu_58_p0 = cal_conv_2_1_int_reg;

assign mul_ln34_7_fu_58_p1 = kernel_2_1_int_reg;

assign mul_ln34_7_fu_58_p2 = ($signed(mul_ln34_7_fu_58_p0) * $signed(mul_ln34_7_fu_58_p1));

assign mul_ln34_8_fu_72_p0 = cal_conv_2_2_int_reg;

assign mul_ln34_8_fu_72_p1 = kernel_2_2_int_reg;

assign mul_ln34_8_fu_72_p2 = ($signed(mul_ln34_8_fu_72_p0) * $signed(mul_ln34_8_fu_72_p1));

assign mul_ln34_fu_123_p0 = cal_conv_0_0_int_reg;

assign mul_ln34_fu_123_p1 = kernel_0_0_int_reg;

assign mul_ln34_fu_123_p2 = ($signed(mul_ln34_fu_123_p0) * $signed(mul_ln34_fu_123_p1));

endmodule //single_conv_calculat
