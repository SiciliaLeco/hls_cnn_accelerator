// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pool_line_buffer_shi_HH_
#define _pool_line_buffer_shi_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct pool_line_buffer_shi : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > data;
    sc_out< sc_lv<1> > cal_pool_address0;
    sc_out< sc_logic > cal_pool_ce0;
    sc_out< sc_logic > cal_pool_we0;
    sc_out< sc_lv<0> > cal_pool_d0;
    sc_in< sc_lv<0> > cal_pool_q0;
    sc_out< sc_lv<1> > cal_pool_address1;
    sc_out< sc_logic > cal_pool_ce1;
    sc_out< sc_logic > cal_pool_we1;
    sc_out< sc_lv<0> > cal_pool_d1;
    sc_in< sc_lv<0> > cal_pool_q1;
    sc_out< sc_lv<3> > pool_line_buffer_address0;
    sc_out< sc_logic > pool_line_buffer_ce0;
    sc_out< sc_logic > pool_line_buffer_we0;
    sc_out< sc_lv<32> > pool_line_buffer_d0;
    sc_in< sc_lv<32> > pool_line_buffer_q0;
    sc_out< sc_lv<3> > pool_line_buffer_address1;
    sc_out< sc_logic > pool_line_buffer_ce1;
    sc_out< sc_logic > pool_line_buffer_we1;
    sc_out< sc_lv<32> > pool_line_buffer_d1;
    sc_in< sc_lv<32> > pool_line_buffer_q1;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    pool_line_buffer_shi(sc_module_name name);
    SC_HAS_PROCESS(pool_line_buffer_shi);

    ~pool_line_buffer_shi();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > reg_71;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > reg_79;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > go_up_reg_86;
    sc_signal< sc_lv<32> > pool_line_buffer_loa_3_reg_91;
    sc_signal< sc_lv<32> > ap_port_reg_data;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_cal_pool_address0();
    void thread_cal_pool_address1();
    void thread_cal_pool_ce0();
    void thread_cal_pool_ce1();
    void thread_cal_pool_d0();
    void thread_cal_pool_d1();
    void thread_cal_pool_we0();
    void thread_cal_pool_we1();
    void thread_pool_line_buffer_address0();
    void thread_pool_line_buffer_address1();
    void thread_pool_line_buffer_ce0();
    void thread_pool_line_buffer_ce1();
    void thread_pool_line_buffer_d0();
    void thread_pool_line_buffer_d1();
    void thread_pool_line_buffer_we0();
    void thread_pool_line_buffer_we1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
