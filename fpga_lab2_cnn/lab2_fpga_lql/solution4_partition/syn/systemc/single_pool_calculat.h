// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _single_pool_calculat_HH_
#define _single_pool_calculat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct single_pool_calculat : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_out< sc_lv<1> > cal_pool_address0;
    sc_out< sc_logic > cal_pool_ce0;
    sc_in< sc_lv<0> > cal_pool_q0;
    sc_out< sc_lv<1> > cal_pool_address1;
    sc_out< sc_logic > cal_pool_ce1;
    sc_in< sc_lv<0> > cal_pool_q1;
    sc_out< sc_lv<31> > ap_return;


    // Module declarations
    single_pool_calculat(sc_module_name name);
    SC_HAS_PROCESS(single_pool_calculat);

    ~single_pool_calculat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state4_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<31> > select_ln48_1_fu_72_p3;
    sc_signal< sc_lv<31> > select_ln48_1_reg_182;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state2_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<31> > select_ln48_2_fu_93_p3;
    sc_signal< sc_lv<31> > select_ln48_2_reg_188;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state3_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<31> > trunc_ln48_3_fu_104_p1;
    sc_signal< sc_lv<31> > trunc_ln48_3_reg_193;
    sc_signal< sc_lv<1> > icmp_ln48_2_fu_108_p2;
    sc_signal< sc_lv<1> > icmp_ln48_2_reg_198;
    sc_signal< sc_lv<31> > select_ln48_4_fu_133_p3;
    sc_signal< sc_lv<31> > select_ln48_4_reg_203;
    sc_signal< sc_lv<31> > trunc_ln48_5_fu_145_p1;
    sc_signal< sc_lv<31> > trunc_ln48_5_reg_208;
    sc_signal< sc_lv<1> > icmp_ln48_4_fu_149_p2;
    sc_signal< sc_lv<1> > icmp_ln48_4_reg_213;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_lv<32> > trunc_ln48_fu_38_p0;
    sc_signal< sc_lv<32> > tmp_fu_42_p1;
    sc_signal< sc_lv<1> > tmp_fu_42_p3;
    sc_signal< sc_lv<31> > trunc_ln48_fu_38_p1;
    sc_signal< sc_lv<31> > select_ln48_fu_50_p3;
    sc_signal< sc_lv<32> > trunc_ln48_1_fu_62_p0;
    sc_signal< sc_lv<32> > zext_ln48_fu_58_p1;
    sc_signal< sc_lv<32> > icmp_ln48_fu_66_p1;
    sc_signal< sc_lv<1> > icmp_ln48_fu_66_p2;
    sc_signal< sc_lv<31> > trunc_ln48_1_fu_62_p1;
    sc_signal< sc_lv<32> > trunc_ln48_2_fu_83_p0;
    sc_signal< sc_lv<32> > zext_ln48_1_fu_80_p1;
    sc_signal< sc_lv<32> > icmp_ln48_1_fu_87_p1;
    sc_signal< sc_lv<1> > icmp_ln48_1_fu_87_p2;
    sc_signal< sc_lv<31> > trunc_ln48_2_fu_83_p1;
    sc_signal< sc_lv<32> > trunc_ln48_3_fu_104_p0;
    sc_signal< sc_lv<32> > zext_ln48_2_fu_100_p1;
    sc_signal< sc_lv<32> > icmp_ln48_2_fu_108_p1;
    sc_signal< sc_lv<31> > select_ln48_3_fu_114_p3;
    sc_signal< sc_lv<32> > trunc_ln48_4_fu_123_p0;
    sc_signal< sc_lv<32> > zext_ln48_3_fu_119_p1;
    sc_signal< sc_lv<32> > icmp_ln48_3_fu_127_p1;
    sc_signal< sc_lv<1> > icmp_ln48_3_fu_127_p2;
    sc_signal< sc_lv<31> > trunc_ln48_4_fu_123_p1;
    sc_signal< sc_lv<32> > trunc_ln48_5_fu_145_p0;
    sc_signal< sc_lv<32> > zext_ln48_4_fu_141_p1;
    sc_signal< sc_lv<32> > icmp_ln48_4_fu_149_p1;
    sc_signal< sc_lv<31> > select_ln48_5_fu_155_p3;
    sc_signal< sc_lv<32> > trunc_ln48_6_fu_164_p0;
    sc_signal< sc_lv<32> > zext_ln48_5_fu_160_p1;
    sc_signal< sc_lv<32> > icmp_ln48_5_fu_168_p1;
    sc_signal< sc_lv<1> > icmp_ln48_5_fu_168_p2;
    sc_signal< sc_lv<31> > trunc_ln48_6_fu_164_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0_1to1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage3;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<31> ap_const_lv31_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage1_iter0();
    void thread_ap_block_state3_pp0_stage2_iter0();
    void thread_ap_block_state4_pp0_stage3_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_idle_pp0_1to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return();
    void thread_cal_pool_address0();
    void thread_cal_pool_address1();
    void thread_cal_pool_ce0();
    void thread_cal_pool_ce1();
    void thread_icmp_ln48_1_fu_87_p1();
    void thread_icmp_ln48_1_fu_87_p2();
    void thread_icmp_ln48_2_fu_108_p1();
    void thread_icmp_ln48_2_fu_108_p2();
    void thread_icmp_ln48_3_fu_127_p1();
    void thread_icmp_ln48_3_fu_127_p2();
    void thread_icmp_ln48_4_fu_149_p1();
    void thread_icmp_ln48_4_fu_149_p2();
    void thread_icmp_ln48_5_fu_168_p1();
    void thread_icmp_ln48_5_fu_168_p2();
    void thread_icmp_ln48_fu_66_p1();
    void thread_icmp_ln48_fu_66_p2();
    void thread_select_ln48_1_fu_72_p3();
    void thread_select_ln48_2_fu_93_p3();
    void thread_select_ln48_3_fu_114_p3();
    void thread_select_ln48_4_fu_133_p3();
    void thread_select_ln48_5_fu_155_p3();
    void thread_select_ln48_fu_50_p3();
    void thread_tmp_fu_42_p1();
    void thread_tmp_fu_42_p3();
    void thread_trunc_ln48_1_fu_62_p0();
    void thread_trunc_ln48_1_fu_62_p1();
    void thread_trunc_ln48_2_fu_83_p0();
    void thread_trunc_ln48_2_fu_83_p1();
    void thread_trunc_ln48_3_fu_104_p0();
    void thread_trunc_ln48_3_fu_104_p1();
    void thread_trunc_ln48_4_fu_123_p0();
    void thread_trunc_ln48_4_fu_123_p1();
    void thread_trunc_ln48_5_fu_145_p0();
    void thread_trunc_ln48_5_fu_145_p1();
    void thread_trunc_ln48_6_fu_164_p0();
    void thread_trunc_ln48_6_fu_164_p1();
    void thread_trunc_ln48_fu_38_p0();
    void thread_trunc_ln48_fu_38_p1();
    void thread_zext_ln48_1_fu_80_p1();
    void thread_zext_ln48_2_fu_100_p1();
    void thread_zext_ln48_3_fu_119_p1();
    void thread_zext_ln48_4_fu_141_p1();
    void thread_zext_ln48_5_fu_160_p1();
    void thread_zext_ln48_fu_58_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
