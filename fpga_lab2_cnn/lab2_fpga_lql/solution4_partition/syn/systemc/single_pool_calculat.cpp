// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "single_pool_calculat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic single_pool_calculat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic single_pool_calculat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> single_pool_calculat::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<4> single_pool_calculat::ap_ST_fsm_pp0_stage1 = "10";
const sc_lv<4> single_pool_calculat::ap_ST_fsm_pp0_stage2 = "100";
const sc_lv<4> single_pool_calculat::ap_ST_fsm_pp0_stage3 = "1000";
const bool single_pool_calculat::ap_const_boolean_1 = true;
const sc_lv<32> single_pool_calculat::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool single_pool_calculat::ap_const_boolean_0 = false;
const sc_lv<32> single_pool_calculat::ap_const_lv32_3 = "11";
const sc_lv<32> single_pool_calculat::ap_const_lv32_1 = "1";
const sc_lv<32> single_pool_calculat::ap_const_lv32_2 = "10";
const sc_lv<1> single_pool_calculat::ap_const_lv1_0 = "0";
const sc_lv<1> single_pool_calculat::ap_const_lv1_1 = "1";
const sc_lv<32> single_pool_calculat::ap_const_lv32_1F = "11111";
const sc_lv<31> single_pool_calculat::ap_const_lv31_0 = "0000000000000000000000000000000";

single_pool_calculat::single_pool_calculat(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter1);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0_reg );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle_pp0_1to1);
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( select_ln48_5_fu_155_p3 );
    sensitive << ( icmp_ln48_5_fu_168_p2 );
    sensitive << ( trunc_ln48_6_fu_164_p1 );

    SC_METHOD(thread_cal_pool_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_cal_pool_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );

    SC_METHOD(thread_cal_pool_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_cal_pool_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln48_1_fu_87_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( cal_pool_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );

    SC_METHOD(thread_icmp_ln48_1_fu_87_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( zext_ln48_1_fu_80_p1 );
    sensitive << ( icmp_ln48_1_fu_87_p1 );

    SC_METHOD(thread_icmp_ln48_2_fu_108_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( cal_pool_q1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );

    SC_METHOD(thread_icmp_ln48_2_fu_108_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( zext_ln48_2_fu_100_p1 );
    sensitive << ( icmp_ln48_2_fu_108_p1 );

    SC_METHOD(thread_icmp_ln48_3_fu_127_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( cal_pool_q0 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_icmp_ln48_3_fu_127_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_ce );
    sensitive << ( zext_ln48_3_fu_119_p1 );
    sensitive << ( icmp_ln48_3_fu_127_p1 );

    SC_METHOD(thread_icmp_ln48_4_fu_149_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( cal_pool_q1 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_icmp_ln48_4_fu_149_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_ce );
    sensitive << ( zext_ln48_4_fu_141_p1 );
    sensitive << ( icmp_ln48_4_fu_149_p1 );

    SC_METHOD(thread_icmp_ln48_5_fu_168_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( cal_pool_q0 );

    SC_METHOD(thread_icmp_ln48_5_fu_168_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( zext_ln48_5_fu_160_p1 );
    sensitive << ( icmp_ln48_5_fu_168_p1 );

    SC_METHOD(thread_icmp_ln48_fu_66_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( cal_pool_q1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_icmp_ln48_fu_66_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( zext_ln48_fu_58_p1 );
    sensitive << ( icmp_ln48_fu_66_p1 );

    SC_METHOD(thread_select_ln48_1_fu_72_p3);
    sensitive << ( select_ln48_fu_50_p3 );
    sensitive << ( icmp_ln48_fu_66_p2 );
    sensitive << ( trunc_ln48_1_fu_62_p1 );

    SC_METHOD(thread_select_ln48_2_fu_93_p3);
    sensitive << ( select_ln48_1_reg_182 );
    sensitive << ( icmp_ln48_1_fu_87_p2 );
    sensitive << ( trunc_ln48_2_fu_83_p1 );

    SC_METHOD(thread_select_ln48_3_fu_114_p3);
    sensitive << ( select_ln48_2_reg_188 );
    sensitive << ( trunc_ln48_3_reg_193 );
    sensitive << ( icmp_ln48_2_reg_198 );

    SC_METHOD(thread_select_ln48_4_fu_133_p3);
    sensitive << ( select_ln48_3_fu_114_p3 );
    sensitive << ( icmp_ln48_3_fu_127_p2 );
    sensitive << ( trunc_ln48_4_fu_123_p1 );

    SC_METHOD(thread_select_ln48_5_fu_155_p3);
    sensitive << ( select_ln48_4_reg_203 );
    sensitive << ( trunc_ln48_5_reg_208 );
    sensitive << ( icmp_ln48_4_reg_213 );

    SC_METHOD(thread_select_ln48_fu_50_p3);
    sensitive << ( tmp_fu_42_p3 );
    sensitive << ( trunc_ln48_fu_38_p1 );

    SC_METHOD(thread_tmp_fu_42_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( cal_pool_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_tmp_fu_42_p3);
    sensitive << ( tmp_fu_42_p1 );

    SC_METHOD(thread_trunc_ln48_1_fu_62_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( cal_pool_q1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_trunc_ln48_1_fu_62_p1);
    sensitive << ( trunc_ln48_1_fu_62_p0 );

    SC_METHOD(thread_trunc_ln48_2_fu_83_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( cal_pool_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );

    SC_METHOD(thread_trunc_ln48_2_fu_83_p1);
    sensitive << ( trunc_ln48_2_fu_83_p0 );

    SC_METHOD(thread_trunc_ln48_3_fu_104_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( cal_pool_q1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );

    SC_METHOD(thread_trunc_ln48_3_fu_104_p1);
    sensitive << ( trunc_ln48_3_fu_104_p0 );

    SC_METHOD(thread_trunc_ln48_4_fu_123_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( cal_pool_q0 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_trunc_ln48_4_fu_123_p1);
    sensitive << ( trunc_ln48_4_fu_123_p0 );

    SC_METHOD(thread_trunc_ln48_5_fu_145_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( cal_pool_q1 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_trunc_ln48_5_fu_145_p1);
    sensitive << ( trunc_ln48_5_fu_145_p0 );

    SC_METHOD(thread_trunc_ln48_6_fu_164_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( cal_pool_q0 );

    SC_METHOD(thread_trunc_ln48_6_fu_164_p1);
    sensitive << ( trunc_ln48_6_fu_164_p0 );

    SC_METHOD(thread_trunc_ln48_fu_38_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( cal_pool_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_trunc_ln48_fu_38_p1);
    sensitive << ( trunc_ln48_fu_38_p0 );

    SC_METHOD(thread_zext_ln48_1_fu_80_p1);
    sensitive << ( select_ln48_1_reg_182 );

    SC_METHOD(thread_zext_ln48_2_fu_100_p1);
    sensitive << ( select_ln48_2_fu_93_p3 );

    SC_METHOD(thread_zext_ln48_3_fu_119_p1);
    sensitive << ( select_ln48_3_fu_114_p3 );

    SC_METHOD(thread_zext_ln48_4_fu_141_p1);
    sensitive << ( select_ln48_4_fu_133_p3 );

    SC_METHOD(thread_zext_ln48_5_fu_160_p1);
    sensitive << ( select_ln48_5_fu_155_p3 );

    SC_METHOD(thread_zext_ln48_fu_58_p1);
    sensitive << ( select_ln48_fu_50_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_reset_idle_pp0 );
    sensitive << ( ap_idle_pp0_1to1 );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );

    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "single_pool_calculat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, cal_pool_address0, "(port)cal_pool_address0");
    sc_trace(mVcdFile, cal_pool_ce0, "(port)cal_pool_ce0");
    sc_trace(mVcdFile, cal_pool_q0, "(port)cal_pool_q0");
    sc_trace(mVcdFile, cal_pool_address1, "(port)cal_pool_address1");
    sc_trace(mVcdFile, cal_pool_ce1, "(port)cal_pool_ce1");
    sc_trace(mVcdFile, cal_pool_q1, "(port)cal_pool_q1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage3_iter0, "ap_block_state4_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, select_ln48_1_fu_72_p3, "select_ln48_1_fu_72_p3");
    sc_trace(mVcdFile, select_ln48_1_reg_182, "select_ln48_1_reg_182");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage1_iter0, "ap_block_state2_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, select_ln48_2_fu_93_p3, "select_ln48_2_fu_93_p3");
    sc_trace(mVcdFile, select_ln48_2_reg_188, "select_ln48_2_reg_188");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage2_iter0, "ap_block_state3_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, trunc_ln48_3_fu_104_p1, "trunc_ln48_3_fu_104_p1");
    sc_trace(mVcdFile, trunc_ln48_3_reg_193, "trunc_ln48_3_reg_193");
    sc_trace(mVcdFile, icmp_ln48_2_fu_108_p2, "icmp_ln48_2_fu_108_p2");
    sc_trace(mVcdFile, icmp_ln48_2_reg_198, "icmp_ln48_2_reg_198");
    sc_trace(mVcdFile, select_ln48_4_fu_133_p3, "select_ln48_4_fu_133_p3");
    sc_trace(mVcdFile, select_ln48_4_reg_203, "select_ln48_4_reg_203");
    sc_trace(mVcdFile, trunc_ln48_5_fu_145_p1, "trunc_ln48_5_fu_145_p1");
    sc_trace(mVcdFile, trunc_ln48_5_reg_208, "trunc_ln48_5_reg_208");
    sc_trace(mVcdFile, icmp_ln48_4_fu_149_p2, "icmp_ln48_4_fu_149_p2");
    sc_trace(mVcdFile, icmp_ln48_4_reg_213, "icmp_ln48_4_reg_213");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0_reg, "ap_enable_reg_pp0_iter0_reg");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter1, "ap_block_state5_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, trunc_ln48_fu_38_p0, "trunc_ln48_fu_38_p0");
    sc_trace(mVcdFile, tmp_fu_42_p1, "tmp_fu_42_p1");
    sc_trace(mVcdFile, tmp_fu_42_p3, "tmp_fu_42_p3");
    sc_trace(mVcdFile, trunc_ln48_fu_38_p1, "trunc_ln48_fu_38_p1");
    sc_trace(mVcdFile, select_ln48_fu_50_p3, "select_ln48_fu_50_p3");
    sc_trace(mVcdFile, trunc_ln48_1_fu_62_p0, "trunc_ln48_1_fu_62_p0");
    sc_trace(mVcdFile, zext_ln48_fu_58_p1, "zext_ln48_fu_58_p1");
    sc_trace(mVcdFile, icmp_ln48_fu_66_p1, "icmp_ln48_fu_66_p1");
    sc_trace(mVcdFile, icmp_ln48_fu_66_p2, "icmp_ln48_fu_66_p2");
    sc_trace(mVcdFile, trunc_ln48_1_fu_62_p1, "trunc_ln48_1_fu_62_p1");
    sc_trace(mVcdFile, trunc_ln48_2_fu_83_p0, "trunc_ln48_2_fu_83_p0");
    sc_trace(mVcdFile, zext_ln48_1_fu_80_p1, "zext_ln48_1_fu_80_p1");
    sc_trace(mVcdFile, icmp_ln48_1_fu_87_p1, "icmp_ln48_1_fu_87_p1");
    sc_trace(mVcdFile, icmp_ln48_1_fu_87_p2, "icmp_ln48_1_fu_87_p2");
    sc_trace(mVcdFile, trunc_ln48_2_fu_83_p1, "trunc_ln48_2_fu_83_p1");
    sc_trace(mVcdFile, trunc_ln48_3_fu_104_p0, "trunc_ln48_3_fu_104_p0");
    sc_trace(mVcdFile, zext_ln48_2_fu_100_p1, "zext_ln48_2_fu_100_p1");
    sc_trace(mVcdFile, icmp_ln48_2_fu_108_p1, "icmp_ln48_2_fu_108_p1");
    sc_trace(mVcdFile, select_ln48_3_fu_114_p3, "select_ln48_3_fu_114_p3");
    sc_trace(mVcdFile, trunc_ln48_4_fu_123_p0, "trunc_ln48_4_fu_123_p0");
    sc_trace(mVcdFile, zext_ln48_3_fu_119_p1, "zext_ln48_3_fu_119_p1");
    sc_trace(mVcdFile, icmp_ln48_3_fu_127_p1, "icmp_ln48_3_fu_127_p1");
    sc_trace(mVcdFile, icmp_ln48_3_fu_127_p2, "icmp_ln48_3_fu_127_p2");
    sc_trace(mVcdFile, trunc_ln48_4_fu_123_p1, "trunc_ln48_4_fu_123_p1");
    sc_trace(mVcdFile, trunc_ln48_5_fu_145_p0, "trunc_ln48_5_fu_145_p0");
    sc_trace(mVcdFile, zext_ln48_4_fu_141_p1, "zext_ln48_4_fu_141_p1");
    sc_trace(mVcdFile, icmp_ln48_4_fu_149_p1, "icmp_ln48_4_fu_149_p1");
    sc_trace(mVcdFile, select_ln48_5_fu_155_p3, "select_ln48_5_fu_155_p3");
    sc_trace(mVcdFile, trunc_ln48_6_fu_164_p0, "trunc_ln48_6_fu_164_p0");
    sc_trace(mVcdFile, zext_ln48_5_fu_160_p1, "zext_ln48_5_fu_160_p1");
    sc_trace(mVcdFile, icmp_ln48_5_fu_168_p1, "icmp_ln48_5_fu_168_p1");
    sc_trace(mVcdFile, icmp_ln48_5_fu_168_p2, "icmp_ln48_5_fu_168_p2");
    sc_trace(mVcdFile, trunc_ln48_6_fu_164_p1, "trunc_ln48_6_fu_164_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0_1to1, "ap_idle_pp0_1to1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

single_pool_calculat::~single_pool_calculat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void single_pool_calculat::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
            ap_enable_reg_pp0_iter0_reg = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
                    esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        icmp_ln48_2_reg_198 = icmp_ln48_2_fu_108_p2.read();
        select_ln48_2_reg_188 = select_ln48_2_fu_93_p3.read();
        trunc_ln48_3_reg_193 = trunc_ln48_3_fu_104_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        icmp_ln48_4_reg_213 = icmp_ln48_4_fu_149_p2.read();
        select_ln48_4_reg_203 = select_ln48_4_fu_133_p3.read();
        trunc_ln48_5_reg_208 = trunc_ln48_5_fu_145_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        select_ln48_1_reg_182 = select_ln48_1_fu_72_p3.read();
    }
}

void single_pool_calculat::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void single_pool_calculat::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[1];
}

void single_pool_calculat::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[2];
}

void single_pool_calculat::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[3];
}

void single_pool_calculat::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void single_pool_calculat::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()));
}

void single_pool_calculat::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())));
}

void single_pool_calculat::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void single_pool_calculat::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void single_pool_calculat::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void single_pool_calculat::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void single_pool_calculat::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void single_pool_calculat::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void single_pool_calculat::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void single_pool_calculat::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void single_pool_calculat::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void single_pool_calculat::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void single_pool_calculat::thread_ap_block_state2_pp0_stage1_iter0() {
    ap_block_state2_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void single_pool_calculat::thread_ap_block_state3_pp0_stage2_iter0() {
    ap_block_state3_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void single_pool_calculat::thread_ap_block_state4_pp0_stage3_iter0() {
    ap_block_state4_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void single_pool_calculat::thread_ap_block_state5_pp0_stage0_iter1() {
    ap_block_state5_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void single_pool_calculat::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void single_pool_calculat::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void single_pool_calculat::thread_ap_enable_reg_pp0_iter0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
        ap_enable_reg_pp0_iter0 = ap_start.read();
    } else {
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg.read();
    }
}

void single_pool_calculat::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void single_pool_calculat::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void single_pool_calculat::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void single_pool_calculat::thread_ap_idle_pp0_1to1() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read())) {
        ap_idle_pp0_1to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_1to1 = ap_const_logic_0;
    }
}

void single_pool_calculat::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void single_pool_calculat::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void single_pool_calculat::thread_ap_return() {
    ap_return = (!icmp_ln48_5_fu_168_p2.read()[0].is_01())? sc_lv<31>(): ((icmp_ln48_5_fu_168_p2.read()[0].to_bool())? select_ln48_5_fu_155_p3.read(): trunc_ln48_6_fu_164_p1.read());
}

void single_pool_calculat::thread_cal_pool_address0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0)))) {
        cal_pool_address0 = ap_const_lv1_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0)))) {
        cal_pool_address0 = ap_const_lv1_0;
    } else {
        cal_pool_address0 = "X";
    }
}

void single_pool_calculat::thread_cal_pool_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        cal_pool_address1 = ap_const_lv1_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0)))) {
        cal_pool_address1 = ap_const_lv1_0;
    } else {
        cal_pool_address1 = "X";
    }
}

void single_pool_calculat::thread_cal_pool_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        cal_pool_ce0 = ap_const_logic_1;
    } else {
        cal_pool_ce0 = ap_const_logic_0;
    }
}

void single_pool_calculat::thread_cal_pool_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        cal_pool_ce1 = ap_const_logic_1;
    } else {
        cal_pool_ce1 = ap_const_logic_0;
    }
}

void single_pool_calculat::thread_icmp_ln48_1_fu_87_p1() {
    icmp_ln48_1_fu_87_p1 =  (sc_lv<32>) (cal_pool_q0.read());
}

void single_pool_calculat::thread_icmp_ln48_1_fu_87_p2() {
    icmp_ln48_1_fu_87_p2 = (!zext_ln48_1_fu_80_p1.read().is_01() || !icmp_ln48_1_fu_87_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln48_1_fu_80_p1.read()) > sc_bigint<32>(icmp_ln48_1_fu_87_p1.read()));
}

void single_pool_calculat::thread_icmp_ln48_2_fu_108_p1() {
    icmp_ln48_2_fu_108_p1 =  (sc_lv<32>) (cal_pool_q1.read());
}

void single_pool_calculat::thread_icmp_ln48_2_fu_108_p2() {
    icmp_ln48_2_fu_108_p2 = (!zext_ln48_2_fu_100_p1.read().is_01() || !icmp_ln48_2_fu_108_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln48_2_fu_100_p1.read()) > sc_bigint<32>(icmp_ln48_2_fu_108_p1.read()));
}

void single_pool_calculat::thread_icmp_ln48_3_fu_127_p1() {
    icmp_ln48_3_fu_127_p1 =  (sc_lv<32>) (cal_pool_q0.read());
}

void single_pool_calculat::thread_icmp_ln48_3_fu_127_p2() {
    icmp_ln48_3_fu_127_p2 = (!zext_ln48_3_fu_119_p1.read().is_01() || !icmp_ln48_3_fu_127_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln48_3_fu_119_p1.read()) > sc_bigint<32>(icmp_ln48_3_fu_127_p1.read()));
}

void single_pool_calculat::thread_icmp_ln48_4_fu_149_p1() {
    icmp_ln48_4_fu_149_p1 =  (sc_lv<32>) (cal_pool_q1.read());
}

void single_pool_calculat::thread_icmp_ln48_4_fu_149_p2() {
    icmp_ln48_4_fu_149_p2 = (!zext_ln48_4_fu_141_p1.read().is_01() || !icmp_ln48_4_fu_149_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln48_4_fu_141_p1.read()) > sc_bigint<32>(icmp_ln48_4_fu_149_p1.read()));
}

void single_pool_calculat::thread_icmp_ln48_5_fu_168_p1() {
    icmp_ln48_5_fu_168_p1 =  (sc_lv<32>) (cal_pool_q0.read());
}

void single_pool_calculat::thread_icmp_ln48_5_fu_168_p2() {
    icmp_ln48_5_fu_168_p2 = (!zext_ln48_5_fu_160_p1.read().is_01() || !icmp_ln48_5_fu_168_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln48_5_fu_160_p1.read()) > sc_bigint<32>(icmp_ln48_5_fu_168_p1.read()));
}

void single_pool_calculat::thread_icmp_ln48_fu_66_p1() {
    icmp_ln48_fu_66_p1 =  (sc_lv<32>) (cal_pool_q1.read());
}

void single_pool_calculat::thread_icmp_ln48_fu_66_p2() {
    icmp_ln48_fu_66_p2 = (!zext_ln48_fu_58_p1.read().is_01() || !icmp_ln48_fu_66_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln48_fu_58_p1.read()) > sc_bigint<32>(icmp_ln48_fu_66_p1.read()));
}

void single_pool_calculat::thread_select_ln48_1_fu_72_p3() {
    select_ln48_1_fu_72_p3 = (!icmp_ln48_fu_66_p2.read()[0].is_01())? sc_lv<31>(): ((icmp_ln48_fu_66_p2.read()[0].to_bool())? select_ln48_fu_50_p3.read(): trunc_ln48_1_fu_62_p1.read());
}

void single_pool_calculat::thread_select_ln48_2_fu_93_p3() {
    select_ln48_2_fu_93_p3 = (!icmp_ln48_1_fu_87_p2.read()[0].is_01())? sc_lv<31>(): ((icmp_ln48_1_fu_87_p2.read()[0].to_bool())? select_ln48_1_reg_182.read(): trunc_ln48_2_fu_83_p1.read());
}

void single_pool_calculat::thread_select_ln48_3_fu_114_p3() {
    select_ln48_3_fu_114_p3 = (!icmp_ln48_2_reg_198.read()[0].is_01())? sc_lv<31>(): ((icmp_ln48_2_reg_198.read()[0].to_bool())? select_ln48_2_reg_188.read(): trunc_ln48_3_reg_193.read());
}

void single_pool_calculat::thread_select_ln48_4_fu_133_p3() {
    select_ln48_4_fu_133_p3 = (!icmp_ln48_3_fu_127_p2.read()[0].is_01())? sc_lv<31>(): ((icmp_ln48_3_fu_127_p2.read()[0].to_bool())? select_ln48_3_fu_114_p3.read(): trunc_ln48_4_fu_123_p1.read());
}

void single_pool_calculat::thread_select_ln48_5_fu_155_p3() {
    select_ln48_5_fu_155_p3 = (!icmp_ln48_4_reg_213.read()[0].is_01())? sc_lv<31>(): ((icmp_ln48_4_reg_213.read()[0].to_bool())? select_ln48_4_reg_203.read(): trunc_ln48_5_reg_208.read());
}

void single_pool_calculat::thread_select_ln48_fu_50_p3() {
    select_ln48_fu_50_p3 = (!tmp_fu_42_p3.read()[0].is_01())? sc_lv<31>(): ((tmp_fu_42_p3.read()[0].to_bool())? ap_const_lv31_0: trunc_ln48_fu_38_p1.read());
}

void single_pool_calculat::thread_tmp_fu_42_p1() {
    tmp_fu_42_p1 =  (sc_lv<32>) (cal_pool_q0.read());
}

void single_pool_calculat::thread_tmp_fu_42_p3() {
    tmp_fu_42_p3 = tmp_fu_42_p1.read().range(31, 31);
}

void single_pool_calculat::thread_trunc_ln48_1_fu_62_p0() {
    trunc_ln48_1_fu_62_p0 =  (sc_lv<32>) (cal_pool_q1.read());
}

void single_pool_calculat::thread_trunc_ln48_1_fu_62_p1() {
    trunc_ln48_1_fu_62_p1 = trunc_ln48_1_fu_62_p0.read().range(31-1, 0);
}

void single_pool_calculat::thread_trunc_ln48_2_fu_83_p0() {
    trunc_ln48_2_fu_83_p0 =  (sc_lv<32>) (cal_pool_q0.read());
}

void single_pool_calculat::thread_trunc_ln48_2_fu_83_p1() {
    trunc_ln48_2_fu_83_p1 = trunc_ln48_2_fu_83_p0.read().range(31-1, 0);
}

void single_pool_calculat::thread_trunc_ln48_3_fu_104_p0() {
    trunc_ln48_3_fu_104_p0 =  (sc_lv<32>) (cal_pool_q1.read());
}

void single_pool_calculat::thread_trunc_ln48_3_fu_104_p1() {
    trunc_ln48_3_fu_104_p1 = trunc_ln48_3_fu_104_p0.read().range(31-1, 0);
}

void single_pool_calculat::thread_trunc_ln48_4_fu_123_p0() {
    trunc_ln48_4_fu_123_p0 =  (sc_lv<32>) (cal_pool_q0.read());
}

void single_pool_calculat::thread_trunc_ln48_4_fu_123_p1() {
    trunc_ln48_4_fu_123_p1 = trunc_ln48_4_fu_123_p0.read().range(31-1, 0);
}

void single_pool_calculat::thread_trunc_ln48_5_fu_145_p0() {
    trunc_ln48_5_fu_145_p0 =  (sc_lv<32>) (cal_pool_q1.read());
}

void single_pool_calculat::thread_trunc_ln48_5_fu_145_p1() {
    trunc_ln48_5_fu_145_p1 = trunc_ln48_5_fu_145_p0.read().range(31-1, 0);
}

void single_pool_calculat::thread_trunc_ln48_6_fu_164_p0() {
    trunc_ln48_6_fu_164_p0 =  (sc_lv<32>) (cal_pool_q0.read());
}

void single_pool_calculat::thread_trunc_ln48_6_fu_164_p1() {
    trunc_ln48_6_fu_164_p1 = trunc_ln48_6_fu_164_p0.read().range(31-1, 0);
}

void single_pool_calculat::thread_trunc_ln48_fu_38_p0() {
    trunc_ln48_fu_38_p0 =  (sc_lv<32>) (cal_pool_q0.read());
}

void single_pool_calculat::thread_trunc_ln48_fu_38_p1() {
    trunc_ln48_fu_38_p1 = trunc_ln48_fu_38_p0.read().range(31-1, 0);
}

void single_pool_calculat::thread_zext_ln48_1_fu_80_p1() {
    zext_ln48_1_fu_80_p1 = esl_zext<32,31>(select_ln48_1_reg_182.read());
}

void single_pool_calculat::thread_zext_ln48_2_fu_100_p1() {
    zext_ln48_2_fu_100_p1 = esl_zext<32,31>(select_ln48_2_fu_93_p3.read());
}

void single_pool_calculat::thread_zext_ln48_3_fu_119_p1() {
    zext_ln48_3_fu_119_p1 = esl_zext<32,31>(select_ln48_3_fu_114_p3.read());
}

void single_pool_calculat::thread_zext_ln48_4_fu_141_p1() {
    zext_ln48_4_fu_141_p1 = esl_zext<32,31>(select_ln48_4_fu_133_p3.read());
}

void single_pool_calculat::thread_zext_ln48_5_fu_160_p1() {
    zext_ln48_5_fu_160_p1 = esl_zext<32,31>(select_ln48_5_fu_155_p3.read());
}

void single_pool_calculat::thread_zext_ln48_fu_58_p1() {
    zext_ln48_fu_58_p1 = esl_zext<32,31>(select_ln48_fu_50_p3.read());
}

void single_pool_calculat::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_1to1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

