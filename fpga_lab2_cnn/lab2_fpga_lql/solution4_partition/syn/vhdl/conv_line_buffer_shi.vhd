-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_line_buffer_shi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data : IN STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_1_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_1_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_1_0_o_ap_vld : OUT STD_LOGIC;
    cal_conv_2_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_2_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_2_0_o_ap_vld : OUT STD_LOGIC;
    cal_conv_0_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_0_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_0_1_o_ap_vld : OUT STD_LOGIC;
    cal_conv_0_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_0_0_ap_vld : OUT STD_LOGIC;
    cal_conv_0_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_0_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_0_2_o_ap_vld : OUT STD_LOGIC;
    cal_conv_1_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_1_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_1_1_o_ap_vld : OUT STD_LOGIC;
    cal_conv_1_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_1_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_1_2_o_ap_vld : OUT STD_LOGIC;
    cal_conv_2_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_2_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_2_1_o_ap_vld : OUT STD_LOGIC;
    cal_conv_2_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_2_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    cal_conv_2_2_o_ap_vld : OUT STD_LOGIC;
    conv_line_buffer_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_line_buffer_ce0 : OUT STD_LOGIC;
    conv_line_buffer_we0 : OUT STD_LOGIC;
    conv_line_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_line_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_line_buffer_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_line_buffer_ce1 : OUT STD_LOGIC;
    conv_line_buffer_we1 : OUT STD_LOGIC;
    conv_line_buffer_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_line_buffer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of conv_line_buffer_shi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_line_buffer_loa_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal conv_line_buffer_loa_1_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_line_buffer_loa_4_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal conv_line_buffer_loa_5_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_line_buffer_loa_6_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal conv_line_buffer_loa_7_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_line_buffer_loa_8_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal conv_line_buffer_loa_9_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_line_buffer_loa_10_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal conv_line_buffer_loa_11_reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_data : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ap_port_reg_data <= data;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                conv_line_buffer_loa_10_reg_232 <= conv_line_buffer_q0;
                conv_line_buffer_loa_11_reg_237 <= conv_line_buffer_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_line_buffer_loa_1_reg_196 <= conv_line_buffer_q1;
                conv_line_buffer_loa_reg_190 <= conv_line_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_line_buffer_loa_4_reg_202 <= conv_line_buffer_q0;
                conv_line_buffer_loa_5_reg_207 <= conv_line_buffer_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                conv_line_buffer_loa_6_reg_212 <= conv_line_buffer_q0;
                conv_line_buffer_loa_7_reg_217 <= conv_line_buffer_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                conv_line_buffer_loa_8_reg_222 <= conv_line_buffer_q0;
                conv_line_buffer_loa_9_reg_227 <= conv_line_buffer_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_92 <= conv_line_buffer_q0;
                reg_98 <= conv_line_buffer_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state15)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cal_conv_0_0 <= cal_conv_0_1_i;

    cal_conv_0_0_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            cal_conv_0_0_ap_vld <= ap_const_logic_1;
        else 
            cal_conv_0_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cal_conv_0_1_o_assign_proc : process(cal_conv_0_1_i, cal_conv_0_2_i, ap_ce, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            cal_conv_0_1_o <= cal_conv_0_2_i;
        else 
            cal_conv_0_1_o <= cal_conv_0_1_i;
        end if; 
    end process;


    cal_conv_0_1_o_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            cal_conv_0_1_o_ap_vld <= ap_const_logic_1;
        else 
            cal_conv_0_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cal_conv_0_2_o_assign_proc : process(cal_conv_0_2_i, ap_ce, conv_line_buffer_loa_reg_190, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            cal_conv_0_2_o <= conv_line_buffer_loa_reg_190;
        else 
            cal_conv_0_2_o <= cal_conv_0_2_i;
        end if; 
    end process;


    cal_conv_0_2_o_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            cal_conv_0_2_o_ap_vld <= ap_const_logic_1;
        else 
            cal_conv_0_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cal_conv_1_0_o_assign_proc : process(cal_conv_1_0_i, cal_conv_1_1_i, ap_ce, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            cal_conv_1_0_o <= cal_conv_1_1_i;
        else 
            cal_conv_1_0_o <= cal_conv_1_0_i;
        end if; 
    end process;


    cal_conv_1_0_o_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            cal_conv_1_0_o_ap_vld <= ap_const_logic_1;
        else 
            cal_conv_1_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cal_conv_1_1_o_assign_proc : process(cal_conv_1_1_i, cal_conv_1_2_i, ap_ce, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            cal_conv_1_1_o <= cal_conv_1_2_i;
        else 
            cal_conv_1_1_o <= cal_conv_1_1_i;
        end if; 
    end process;


    cal_conv_1_1_o_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            cal_conv_1_1_o_ap_vld <= ap_const_logic_1;
        else 
            cal_conv_1_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cal_conv_1_2_o_assign_proc : process(cal_conv_1_2_i, ap_ce, conv_line_buffer_loa_1_reg_196, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            cal_conv_1_2_o <= conv_line_buffer_loa_1_reg_196;
        else 
            cal_conv_1_2_o <= cal_conv_1_2_i;
        end if; 
    end process;


    cal_conv_1_2_o_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            cal_conv_1_2_o_ap_vld <= ap_const_logic_1;
        else 
            cal_conv_1_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cal_conv_2_0_o_assign_proc : process(cal_conv_2_0_i, cal_conv_2_1_i, ap_ce, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            cal_conv_2_0_o <= cal_conv_2_1_i;
        else 
            cal_conv_2_0_o <= cal_conv_2_0_i;
        end if; 
    end process;


    cal_conv_2_0_o_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            cal_conv_2_0_o_ap_vld <= ap_const_logic_1;
        else 
            cal_conv_2_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cal_conv_2_1_o_assign_proc : process(cal_conv_2_1_i, cal_conv_2_2_i, ap_ce, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            cal_conv_2_1_o <= cal_conv_2_2_i;
        else 
            cal_conv_2_1_o <= cal_conv_2_1_i;
        end if; 
    end process;


    cal_conv_2_1_o_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            cal_conv_2_1_o_ap_vld <= ap_const_logic_1;
        else 
            cal_conv_2_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cal_conv_2_2_o_assign_proc : process(cal_conv_2_2_i, ap_ce, ap_port_reg_data, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            cal_conv_2_2_o <= ap_port_reg_data;
        else 
            cal_conv_2_2_o <= cal_conv_2_2_i;
        end if; 
    end process;


    cal_conv_2_2_o_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            cal_conv_2_2_o_ap_vld <= ap_const_logic_1;
        else 
            cal_conv_2_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    conv_line_buffer_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_line_buffer_address0 <= ap_const_lv4_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_line_buffer_address0 <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_line_buffer_address0 <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_line_buffer_address0 <= ap_const_lv4_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            conv_line_buffer_address0 <= ap_const_lv4_E;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            conv_line_buffer_address0 <= ap_const_lv4_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_line_buffer_address0 <= ap_const_lv4_9;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            conv_line_buffer_address0 <= ap_const_lv4_6;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            conv_line_buffer_address0 <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_line_buffer_address0 <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            conv_line_buffer_address0 <= ap_const_lv4_3;
        else 
            conv_line_buffer_address0 <= "XXXX";
        end if; 
    end process;


    conv_line_buffer_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_line_buffer_address1 <= ap_const_lv4_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_line_buffer_address1 <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_line_buffer_address1 <= ap_const_lv4_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            conv_line_buffer_address1 <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            conv_line_buffer_address1 <= ap_const_lv4_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_line_buffer_address1 <= ap_const_lv4_A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            conv_line_buffer_address1 <= ap_const_lv4_7;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            conv_line_buffer_address1 <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_line_buffer_address1 <= ap_const_lv4_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            conv_line_buffer_address1 <= ap_const_lv4_B;
        else 
            conv_line_buffer_address1 <= "XXXX";
        end if; 
    end process;


    conv_line_buffer_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_ce) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            conv_line_buffer_ce0 <= ap_const_logic_1;
        else 
            conv_line_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_line_buffer_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_ce) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            conv_line_buffer_ce1 <= ap_const_logic_1;
        else 
            conv_line_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_line_buffer_d0_assign_proc : process(reg_92, ap_CS_fsm_state8, reg_98, conv_line_buffer_loa_reg_190, conv_line_buffer_loa_1_reg_196, conv_line_buffer_loa_5_reg_207, conv_line_buffer_loa_7_reg_217, conv_line_buffer_loa_8_reg_222, conv_line_buffer_loa_11_reg_237, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            conv_line_buffer_d0 <= reg_98;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_line_buffer_d0 <= conv_line_buffer_loa_11_reg_237;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_line_buffer_d0 <= conv_line_buffer_loa_1_reg_196;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_line_buffer_d0 <= conv_line_buffer_loa_8_reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_line_buffer_d0 <= conv_line_buffer_loa_7_reg_217;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_line_buffer_d0 <= conv_line_buffer_loa_5_reg_207;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_line_buffer_d0 <= conv_line_buffer_loa_reg_190;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_line_buffer_d0 <= reg_92;
        else 
            conv_line_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_line_buffer_d1_assign_proc : process(cal_conv_1_0_i, cal_conv_2_0_i, reg_92, ap_CS_fsm_state8, reg_98, conv_line_buffer_loa_4_reg_202, conv_line_buffer_loa_6_reg_212, conv_line_buffer_loa_9_reg_227, conv_line_buffer_loa_10_reg_232, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            conv_line_buffer_d1 <= cal_conv_2_0_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_line_buffer_d1 <= reg_92;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_line_buffer_d1 <= conv_line_buffer_loa_10_reg_232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_line_buffer_d1 <= conv_line_buffer_loa_9_reg_227;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_line_buffer_d1 <= cal_conv_1_0_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_line_buffer_d1 <= conv_line_buffer_loa_6_reg_212;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_line_buffer_d1 <= conv_line_buffer_loa_4_reg_202;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_line_buffer_d1 <= reg_98;
        else 
            conv_line_buffer_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_line_buffer_we0_assign_proc : process(ap_ce, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            conv_line_buffer_we0 <= ap_const_logic_1;
        else 
            conv_line_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_line_buffer_we1_assign_proc : process(ap_ce, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            conv_line_buffer_we1 <= ap_const_logic_1;
        else 
            conv_line_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
